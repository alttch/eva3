#!/usr/bin/env bash

D=`realpath $0`
cd `dirname ${D}`/..

WAIT_TO_KILL=10 # sec * 2 before kill -KILL
MAX_START_WAIT=10 # sec * 2 before kill -KILL

export EVA_DIR=`pwd`

[ -f ./etc/eva_registry ] && source ./etc/eva_registry

[ -z ${REGISTRY_DIR} ] && REGISTRY_DIR=${EVA_DIR}/runtime/registry
[ -z ${SOCKET} ] && SOCKET=${EVA_DIR}/var/registry.sock
[ -z ${AUTO_BAK} ] && AUTO_BAK=10
[ -z ${WORKERS} ] && WORKERS=2

REGISTRY=${EVA_DIR}/yedb/yedb-server
PIDFILE=${EVA_DIR}/var/registry.pid
REGISTRY_ARGS="${REGISTRY_DIR} --bind ${SOCKET} --pid-file ${PIDFILE} --auto-bak ${AUTO_BAK} --workers ${WORKERS} --default-fmt json"
SAFE_RUN_PIDFILE=${EVA_DIR}/var/registry_safe.pid
SAFE_RUN=${EVA_DIR}/sbin/safe-run.sh
TEST=${EVA_DIR}/yedb/yedb-cli test

source ./etc/eva_servers

if [ ${REGISTRY_SUPERVISOR_PROGRAM} ]; then
  case $1 in
    start)
      supervisorctl start ${REGISTRY_SUPERVISOR_PROGRAM}
      exit $?
      ;;
    stop)
      supervisorctl stop watchdog-${REGISTRY_SUPERVISOR_PROGRAM}
      exit $?
      ;;
    status)
      supervisorctl status ${REGISTRY_SUPERVISOR_PROGRAM}
      exit $?
      ;;
    restart)
      supervisorctl restart ${REGISTRY_SUPERVISOR_PROGRAM}
      exit $?
      ;;
  esac
fi

function exec_cmd {
  if [ "x${REGISTRY_USER}" == "x" ]; then
    $*
    return $?
  else
    su ${REGISTRY_USER} -c "$*"
    return $?
  fi
}

case $1 in
  start)
    echo -n 'Starting EVA registry server .'
    ps xaww|grep -v grep|grep ${REGISTRY} > /dev/null 2>&1
    if [ $? == 0 ]; then
      echo
      echo "already started"
      exit 2
    fi
    exec_cmd ${SAFE_RUN} ${SAFE_RUN_PIDFILE} ${REGISTRY} ${REGISTRY_ARGS} > /dev/null 2>&1 &
    result=1
    C=0
    while [ "$result" != "0" ]; do
      if [ $C -gt ${MAX_START_WAIT} ]; then
        echo " Failed!"
        exit 1
      fi
      exec_cmd "${TEST}"
      result=$?
      if [ "$result" == "0" ]; then
        break
      fi
      C=`expr $C + 1`
      echo -n "."
      sleep 0.5
    done
    echo " started"
    [ "$INVOCATION_ID" ] && $EVA_DIR/sbin/sblock.sh &
    exit 0
    ;;
  launch)
    [ "x$2" = "xdebug" ] && DEBUG="EVA_CORE_DEBUG=1" || DEBUG=
    ${REGISTRY} ${REGISTRY_ARGS} -v
    ;;
  stop)
    ps xaww|grep -v grep|grep ${REGISTRY} > /dev/null 2>&1
    [ $? == 0 ] || exit 1
    echo -n 'Stopping EVA registry server '
    PID_SAFE_RUN=
    PID_REGISTRY=
    [ -f ${SAFE_RUN_PIDFILE} ] && PID_SAFE_RUN=`cat ${SAFE_RUN_PIDFILE}`
    [ -f ${PIDFILE} ] && PID_REGISTRY=`cat ${PIDFILE}`
    if [ "x${PID_SAFE_RUN}" != "x" ]; then
      kill ${PID_SAFE_RUN} > /dev/null 2>&1
      rm -f ${SAFE_RUN_PIDFILE}
    fi
    if [ "x${PID_REGISTRY}" != "x" ]; then
      kill ${PID_REGISTRY} > /dev/null 2>&1
      I=0
      while kill -0 ${PID_REGISTRY} > /dev/null 2>&1; do
        echo -n '.'
        sleep 0.5
        I=`expr ${I} + 1`
        if [ ${I} -ge ${WAIT_TO_KILL} ]; then
          echo -n  'killing '
          kill -KILL "${PID_REGISTRY}"
          break
        fi
      done
      rm -f "${PIDFILE}"
    fi
    ps xaww|grep -v grep|grep ${REGISTRY}|awk '{ print $1 }'|xargs kill > /dev/null 2>&1
    if [ $? == 0 ]; then
      sleep 10
      ps xaww|grep -v grep|grep ${REGISTRY}|awk '{ print $1 }'|xargs kill -9 > /dev/null 2>&1
    fi
    echo ' stopped'
    [ "$INVOCATION_ID" ] && (ps auxw|grep -v grep |grep $EVA_DIR/sbin/sblock.sh|awk '{ print $2 }'|xargs kill -9)
    exit 0
    ;;
  restart)
    ./sbin/registry-control stop $2
    ./sbin/registry-control start $2
    ;;
  status)
    ps xaww|grep -v grep|grep ${REGISTRY} > /dev/null 2>&1
    if [ $? == 0 ]; then
      echo "running"
    else
      echo "stopped"
    fi
    ;;
  version)
    exec_cmd ./yedb/yedb-cli version
    ;;
  *)
    echo "Usage: registry-control start|stop|restart|version"
esac
