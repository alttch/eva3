#!/usr/bin/env bash

DEFAULT_TIMEOUT=15

# author     :  Altertech Group, http://www.altertech.com/
# copyright  :  Copyright (C) 2018 Altertech Group
# license    :  Apache License 2.0

shopt -s extglob

D=$(realpath "$0")
cd "$(dirname "${D}")/.." || exit 1

_EX=1

PRODUCT=
FUNCTION=
#SYSAPI=
VERBOSE=0

function showHelp() {
  cat <<EOF
EVA API direct call CLI

Usage: eva-tinyapi <-T timeout> <-C type> <-F function> [params]

    -T      API call timeout (default: ${DEFAULT_TIMEOUT})
    -C      uc, lm or sfa
    -F      API function
    -v      verbose mode
    params  API function params (e.g. i=test full=1), space separated

    -V      print EVA version and exit
    -B      print EVA build and exit

Exit code = curl exit code

WARNING: eva-tinyapi has been tested with basic API functions only and not
recommended to use in a production unless in EVA internal scripts.
EOF
}

function echoV() {
  [ ${VERBOSE} -gt 0 ] && echo "$@"
}


TIMEOUT=${DEFAULT_TIMEOUT}
DATA=


while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
    -C)
      PRODUCT="$2"
      shift
      shift
      ;;
    -T) TIMEOUT="$2"
      shift
      shift
      ;;
    -F) FUNCTION="$2"
      shift
      shift
      ;;
    -v) VERBOSE=1
      shift
      ;;
    -vv) VERBOSE=2
      shift
      ;;
    -h) showHelp
      exit 0
      ;;
    -V) grep ^__version__ ./sbin/ucserv.py |cut -d\" -f2
      exit 0
      ;;
    -B) grep ^product_build ./sbin/ucserv.py |cut -d= -f2|sed 's/ //g'
      exit 0
      ;;
    *)
      if [[ "$1" = *=* ]]; then
        [ -z "$DATA" ] || DATA="${DATA}, "
        D=$(echo "$1" | sed "s/\\(.*\\)=\\(.*\\)/\"\\1\" : \"\\2\"/g")
        shift;
        DATA="${DATA} ${D}"
      else
        echo "Unknown option: ${key}"
        showHelp
        exit 10
      fi
      ;;
  esac
done

if [ -z "$PRODUCT" ] || [ -z "$FUNCTION" ]; then
  echo "No product or function specified"
  echo
  showHelp
  exit 10
fi

REGISTRY_INI=./etc/eva_config

[ -f "${REGISTRY_INI}" ] && source "${REGISTRY_INI}"
[ -z "${SOCKET}" ] && SOCKET=./var/registry.sock
[ -z "${SYSTEM_NAME}" ] && SYSTEM_NAME=$(hostname)

source <(./yedb/yedb-cli -C "${SOCKET}" source \
  "eva3/${SYSTEM_NAME}/config/${PRODUCT}:webapi" --prefix WEBAPI)

if [ "$WEBAPI_LISTEN" ]; then
  CONNECT_TO=${WEBAPI_LISTEN}
  U="http"
elif [ "$WEBAPI_LISTEN_SSL_LISTEN" ]; then
  CONNECT_TO=${WEBAPI_SSL_LISTEN}
  U="https"
else
  echo "Can not find API host/port"
  exit 9
fi

U="${U}://${CONNECT_TO//0.0.0.0/127.0.0.1}/jrpc"

source <(./yedb/yedb-cli -C "${SOCKET}" source \
  "eva3/${SYSTEM_NAME}/config/${PRODUCT}/apikeys/masterkey" --prefix MASTERKEY)

if [ -z "$MASTERKEY_KEY" ]; then
  echo "Can not find masterkey"
  exit 9
fi

[ -z "$DATA" ] || DATA="${DATA}, "

DATA="$DATA \"k\" : \"$MASTERKEY_KEY\""

ID=1
DATA="{ \"jsonrpc\": \"2.0\", \"method\": \"${FUNCTION}\", \"params\": { ${DATA} }, \"id\": \"${ID}\"}"

echoV "API call to $U"
echoV "Timeout: ${TIMEOUT}"

if [ ${VERBOSE} == "2" ]; then
  VERB="-v"
else
  VERB=
fi

if [ $VERB ]; then
  echo "$DATA" | \
    curl --header "Content-Type: application/json" --data @- -X POST -m "${TIMEOUT}" -s "${VERB}" "$U"
    else
      RESULT=$(echo "$DATA" | curl --header "Content-Type: application/json" --data @- -X POST -m "${TIMEOUT}" -s "${VERB}" "$U")
fi
_EX=$?
echoV
echoV "Curl exit code: $_EX"
if [ ${VERB} ]; then
  exit $_EX
fi
if [ $_EX -ne 0 ]; then
  echo "Server error"
  exit 7
fi

if ! R=$(echo "$RESULT" | jq .result 2>&1) || [ "$R" == "null" ]; then
  if ! ERROR_CODE=$(echo "$RESULT" | jq -Mr .error.code 2>&1); then
    exit 9
  fi
  if ! ERROR_MESSAGE=$(echo "$RESULT" | \
    jq -Mr .error.message 2>&1) || [ "$ERROR_CODE" == "null" ]; then
      exit 9
  fi
  echo "${ERROR_MESSAGE}"
  exit "${ERROR_CODE}"
fi

echo "$R"

exit 0
