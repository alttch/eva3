SFA RESTful API
****************

:doc:`SCADA Final Aggregator<sfa>` API is used to manage EVA ICS cloud and aggregated resources.

This document describes API methods for RESTful calls. For direct and JSON RPC
calls look :doc:`/sfa/sfa_api`.

RESTful API basics
==================

.. warning::

    RESTful API is deprecated and scheduled to be removed (not implemented) in
    EVA ICS v4. Use JSON RPC API, whenever it is possible.

Majority EVA ICS API components and items support `REST
<https://en.wikipedia.org/wiki/Representational_state_transfer>`_. Parameters
for *POST, PUT, PATCH* and *DELETE* requests can be sent in both JSON and
multipart/form-data. For JSON, *Content-Type: application/json* header must be
specified.

Long API calls
--------------

.. warning::

    It's highly not recommended to perform long API calls, calling API
    functions from JavaScript in a web browser (e.g. giving "w" param to action
    methods to wait until action finish). Web browser may repeat API call
    continuously, which may lead to absolutely unexpected behavior.

Requests
--------

API key can be sent in HTTP **X-Auth-Key** header (preferred) or in request
parameters (as **k**).

* **GET** request is used to get information about resource or list of
  resources of the specified type.
* **POST** request is used to perform special API calls and create resources in
  case when resource id is generated by server. In the last case, response
  always contains additional field *Location* which points to the resource
  created.
* **PUT** request is used to create new resources. If resource already exists,
  the server could refuse recreating it, responding with **409 Conflict** HTTP
  error. 
* **PATCH** request is used to modify resource parameters.
* **DELETE** request is used to delete resource.
  
For resource creation and modification, multiple parameters can be specified in
a single request. For majority requests of such purpose, a special parameter
*"save"* is used to tell server (if *"save": true*) to save the resource
configuration immediately after its modification.

For the group-related calls, put trailing slash at the end of the request URL:

    /r/<resource_type>/<group>/

Responses
---------

**Success responses:**

* **200 OK** API call completed successfully
* **201 Created** API call completed successfully, Response header
  *Location* contains either uri to the newly created object or resource is
  accessible by the effective request uri. For resources created with *PUT*,
  body contains either serialized resource object or resource type and id
* **202 Accepted** The server accepted command and will process it later.
* **204 No Content** API call completed successfully, no content to return

**Error responses:**

* **403 Forbidden** the API key has no access to this function or resource
* **404 Not Found** resource doesn't exist
* **405 Method Not Allowed** API function/method not found
* **409 Conflict** resource/object already exists or is locked
* **500 API Error** API function execution has been failed. Check
  input parameters and server logs.

Response body may contain additional information encoded in JSON. *{
"result": "OK" }* and *{ "result": "ERROR" }* in body are not returned.

Long API calls
--------------

* Long API calls should be avoided at any cost.

* All critical action and command methods have an option to obtain action ID
  and check for the result later.

* If long API calls are performed between controllers (e.g. action methods with
  *wait* param), remote controller timeout should be always greater than max.
  expected "wait" timeout in API call, otherwise client controller will repeat
  API calls continuously, up to max **retries** for the target controller.

.. contents::

.. _sfapi_restful_cat_general:

General functions
=================



.. _sfapi_restful_test:

test API/key and get system info
--------------------------------

Test can be executed with any valid API key of the controller the function is called to.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/test.rest
    :response: http-examples/sfapi/test.resp-rest

Parameters:

* **API Key** any valid API key

Returns:

JSON dict with system info and current API key permissions (for masterkey only { "master": true } is returned)


.. _sfapi_restful_save:

save database and runtime configuration
---------------------------------------

All modified items, their status, and configuration will be written to the disk. If **exec_before_save** command is defined in the controller's configuration file, it's called before saving and **exec_after_save** after (e.g. to switch the partition to write mode and back to read-only).

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/save.rest
    :response: http-examples/sysapi/save.resp-rest

Parameters:

* **API Key** API key with *sysfunc=yes* permissions


.. _sfapi_restful_cmd:

execute a remote system command
-------------------------------

Executes a :ref:`command script<cmd>` on the server where the controller is installed.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/cmd.rest
    :response: http-examples/sysapi/cmd.resp-rest

Parameters:

* **API Key** API key with *allow=cmd* permissions

Optionally:

* **a** string of command arguments, separated by spaces (passed to the script) or array (list)
* **w** wait (in seconds) before API call sends a response. This allows to try waiting until command finish
* **t** maximum time of command execution. If the command fails to finish within the specified time (in sec), it will be terminated
* **s** STDIN data


.. _sfapi_restful_list_plugins:

get list of loaded core plugins
-------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_plugins.rest
    :response: http-examples/sysapi/list_plugins.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Returns:

list with plugin module information


.. _sfapi_restful_shutdown_core:

shutdown the controller
-----------------------

Controller process will be exited and then (should be) restarted by watchdog. This allows to restart controller remotely.

For MQTT API calls a small shutdown delay usually should be specified to let the core send the correct API response.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/shutdown_core.rest
    :response: http-examples/sysapi/shutdown_core.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **t** shutdown delay (seconds)


.. _sfapi_restful_set_debug:

switch debugging mode
---------------------

Enables and disables debugging mode while the controller is running. After the controller is restarted, this parameter is lost and controller switches back to the mode specified in the configuration file.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/set_debug.rest
    :response: http-examples/sysapi/set_debug.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **debug** true for enabling debug mode, false for disabling


.. _sfapi_restful_login:

log in and get authentication token
-----------------------------------

Obtains authentication :doc:`token</api_tokens>` which can be used in API calls instead of API key.

If both **k** and **u** args are absent, but API method is called with HTTP request, which contain HTTP header for basic authorization, the function will try to parse it and log in user with credentials provided.

If authentication token is specified, the function will check it and return token information if it is valid.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/login.rest
    :response: http-examples/sfapi/login.resp-rest

Parameters:

* **API Key** valid API key or
* **u** user login
* **p** user password
* **a** authentication token

Returns:

A dict, containing API key ID and authentication token


.. _sfapi_restful_logout:

log out and purge authentication token
--------------------------------------

Purges authentication :doc:`token</api_tokens>`

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/logout.rest
    :response: http-examples/sfapi/logout.resp-rest

Parameters:

* **API Key** valid token



.. _sfapi_restful_cat_item:

Item functions
==============



.. _sfapi_restful_q_clean:

clean action queue of unit
--------------------------

Cancels all queued actions, keeps the current action running.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/q_clean.rest
    :response: http-examples/sfapi/q_clean.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_action:

create unit control action
--------------------------

The call is considered successful when action is put into the action queue of selected unit.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/action.rest
    :response: http-examples/sfapi/action.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **s** desired unit status
* **v** desired unit value
* **w** wait for the completion for the specified number of seconds
* **p** queue priority (default is 100, lower is better)
* **q** global queue timeout, if expires, action is marked as "dead"

Returns:

Serialized action object. If action is marked as dead, an error is returned (exception raised)


.. _sfapi_restful_disable_actions:

disable unit actions
--------------------

Disables unit to run and queue new actions.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/disable_actions.rest
    :response: http-examples/sfapi/disable_actions.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_enable_actions:

enable unit actions
-------------------

Enables unit to run and queue new actions.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/enable_actions.rest
    :response: http-examples/sfapi/enable_actions.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_result:

get action status or macro run result
-------------------------------------

Checks the result of the action by its UUID or returns the actions for the specified unit or execution result of the specified macro.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/result.rest
    :response: http-examples/sfapi/result.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **g** filter by unit group
* **s** filter by action status: Q for queued, R for running, F for finished

Returns:

list or single serialized action object


.. _sfapi_restful_groups:

get item group list
-------------------

Get the list of item groups. Useful e.g. for custom interfaces.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/groups.rest
    :response: http-examples/sfapi/groups.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_state:

get item state
--------------

State of the item or all items of the specified type can be obtained using state command.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/state.rest
    :response: http-examples/sfapi/state.resp-rest

Parameters:

* **API Key** valid API key

Optionally:



.. _sfapi_restful_state_history:

get item state history
----------------------

State history of one :doc:`item</items>` or several items of the specified type can be obtained using **state_history** command.

If master key is used, the method attempts to get stored state for an item even if it doesn't present currently in system.

The method can return state log for disconnected items as well.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/state_history.rest
    :response: http-examples/sfapi/state_history.resp-rest

Parameters:

* **API Key** valid API key
* **a** history notifier id (default: db_1)

Optionally:

* **s** start time (timestamp or ISO or e.g. 1D for -1 day)
* **e** end time (timestamp or ISO or e.g. 1D for -1 day)
* **l** records limit (doesn't work with "w")
* **x** state prop ("status" or "value")
* **t** time format ("iso" or "raw" for unix timestamp, default is "raw")
* **w** fill frame with the interval (e.g. "1T" - 1 min, "2H" - 2 hours etc.), start time is required, set to 1D if not specified
* **g** output format ("list", "dict" or "chart", default is "list")
* **c** options for chart (dict or comma separated)
* **o** extra options for notifier data request

Returns:

history data in specified format or chart image.

For chart, JSON RPC gets reply with "content_type" and "data" fields, where content is image content type. If PNG image format is selected, data is base64-encoded.

Options for chart (all are optional):

* type: chart type (line or bar, default is line)

* tf: chart time format

* out: output format (svg, png, default is svg),

* style: chart style (without "Style" suffix, e.g. Dark)

* other options: http://pygal.org/en/stable/documentation/configuration/chart.html#options (use range_min, range_max for range, other are passed as-is)

If option "w" (fill) is used, number of digits after comma may be specified. E.g. 5T:3 will output values with 3 digits after comma.

Additionally, SI prefix may be specified to convert value to kilos, megas etc, e.g. 5T:k:3 - divide value by 1000 and output 3 digits after comma. Valid prefixes are: k, M, G, T, P, E, Z, Y.

If binary prefix is required, it should be followed by "b", e.g. 5T:Mb:3 - divide value by 2^20 and output 3 digits after comma.


.. _sfapi_restful_state_log:

get item state log
------------------

State log of a single :doc:`item</items>` or group of the specified type can be obtained using **state_log** command.

note: only SQL notifiers are supported

Difference from state_history method:

* state_log doesn't optimize data to be displayed on charts * the data is returned from a database as-is * a single item OID or OID mask (e.g. sensor:env/#) can be specified

note: the method supports MQTT-style masks but only masks with wildcard-ending, like "type:group/subgroup/#" are supported.

The method can return state log for disconnected items as well.

For wildcard fetching, API key should have an access to the whole chosen group.

note: record limit means the limit for records, fetched from the database, but repeating state records are automatically grouped and the actual number of returned records can be lower than requested.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/state_log.rest
    :response: http-examples/sfapi/state_log.resp-rest

Parameters:

* **API Key** valid API key
* **a** history notifier id (default: db_1)

Optionally:

* **s** start time (timestamp or ISO or e.g. 1D for -1 day)
* **e** end time (timestamp or ISO or e.g. 1D for -1 day)
* **l** records limit (doesn't work with "w")
* **t** time format ("iso" or "raw" for unix timestamp, default is "raw")
* **o** extra options for notifier data request

Returns:

state log records (list)


.. _sfapi_restful_kill:

kill unit actions
-----------------

Apart from canceling all queued commands, this function also terminates the current running action.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/kill.rest
    :response: http-examples/sfapi/kill.resp-rest

Parameters:

* **API Key** valid API key

Returns:

If the current action of the unit cannot be terminated by configuration, the notice "pt" = "denied" will be returned additionally (even if there's no action running)


.. _sfapi_restful_terminate:

terminate action execution
--------------------------

Terminates or cancel the action if it is still queued

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/terminate.rest
    :response: http-examples/sfapi/terminate.resp-rest

Parameters:

* **API Key** valid API key

Returns:

An error result will be returned eitner if action is terminated (Resource not found) or if termination process is failed or denied by unit configuration (Function failed)


.. _sfapi_restful_action_toggle:

toggle unit status
------------------

Create unit control action to toggle its status (1->0, 0->1)

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/action_toggle.rest
    :response: http-examples/sfapi/action_toggle.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **w** wait for the completion for the specified number of seconds
* **p** queue priority (default is 100, lower is better)
* **q** global queue timeout, if expires, action is marked as "dead"

Returns:

Serialized action object. If action is marked as dead, an error is returned (exception raised)


.. _sfapi_restful_clear:

clear lvar state
----------------

set status (if **expires** lvar param > 0) or value (if **expires** isn't set) of a :ref:`logic variable<lvar>` to *0*. Useful when lvar is used as a timer to stop it, or as a flag to set it *False*.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/clear.rest
    :response: http-examples/sfapi/clear.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_toggle:

clear lvar state
----------------

set status (if **expires** lvar param > 0) or value (if **expires** isn't set) of a :ref:`logic variable<lvar>` to *0*. Useful when lvar is used as a timer to stop it, or as a flag to set it *False*.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/toggle.rest
    :response: http-examples/sfapi/toggle.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_decrement:

decrement lvar value
--------------------

Decrement value of a :ref:`logic variable<lvar>`. Initial value should be number

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/decrement.rest
    :response: http-examples/sfapi/decrement.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_increment:

increment lvar value
--------------------

Increment value of a :ref:`logic variable<lvar>`. Initial value should be number

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/increment.rest
    :response: http-examples/sfapi/increment.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_reset:

reset lvar state
----------------

Set status and value of a :ref:`logic variable<lvar>` to *1*. Useful when lvar is being used as a timer to reset it, or as a flag to set it *True*.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/reset.rest
    :response: http-examples/sfapi/reset.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_set:

set lvar state
--------------

Set status and value of a :ref:`logic variable<lvar>`.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/set.rest
    :response: http-examples/sfapi/set.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **s** lvar status
* **v** lvar value



.. _sfapi_restful_cat_macro:

Logic control macros
====================



.. _sfapi_restful_run:

execute macro
-------------

Execute a :doc:`macro</lm/macros>` with the specified arguments.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/run.rest
    :response: http-examples/sfapi/run.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **a** macro arguments, array or space separated
* **kw** macro keyword arguments, name=value, comma separated or dict
* **w** wait for the completion for the specified number of seconds
* **p** queue priority (default is 100, lower is better)
* **q** global queue timeout, if expires, action is marked as "dead"


.. _sfapi_restful_groups_macro:

get macro groups list
---------------------

Get the list of macros. Useful e.g. for custom interfaces.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/groups_macro.rest
    :response: http-examples/sfapi/groups_macro.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_list_macros:

get macro list
--------------

Get the list of all available :doc:`macros</lm/macros>`.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/list_macros.rest
    :response: http-examples/sfapi/list_macros.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **i** filter by controller



.. _sfapi_restful_cat_cycle:

Logic cycles
============



.. _sfapi_restful_groups_cycle:

get cycle groups list
---------------------

Get the list of cycles. Useful e.g. for custom interfaces.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/groups_cycle.rest
    :response: http-examples/sfapi/groups_cycle.resp-rest

Parameters:

* **API Key** valid API key


.. _sfapi_restful_get_cycle:

get cycle information
---------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/get_cycle.rest
    :response: http-examples/sfapi/get_cycle.resp-rest

Parameters:

* **API Key** valid API key

Returns:

field "value" contains real average cycle interval


.. _sfapi_restful_list_cycles:

get cycle list
--------------

Get the list of all available :doc:`cycles</lm/cycles>`.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/list_cycles.rest
    :response: http-examples/sfapi/list_cycles.resp-rest

Parameters:

* **API Key** valid API key

Optionally:

* **i** filter by controller



.. _sfapi_restful_cat_supervisor:

Supervisor functions
====================



.. _sfapi_restful_supervisor_lock:

set supervisor API lock
-----------------------

When supervisor lock is set, SFA API functions become read-only for all users, except users in the lock scope.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/supervisor_lock.rest
    :response: http-examples/sfapi/supervisor_lock.resp-rest

Parameters:

* **API Key** API key with *allow=supervisor* permissions

Notes:

supervisor_lock should be a dictionary. If the dictionary is empty, default lock is set.

* attribute "l" = "<k|u>" sets lock scope (key / user)

* attribute "c" = "<k|u>" set unlock/override scope

attribute "o" overrides lock owner (master key is required) with sub-attributes:

* "u" = user

* "utp" = user type (null for local, "msad" for Active Directory etc.)

* "key_id" = API key ID


.. _sfapi_restful_supervisor_unlock:

clear supervisor API lock
-------------------------

API key should have permission to clear existing supervisor lock

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/supervisor_unlock.rest
    :response: http-examples/sfapi/supervisor_unlock.resp-rest

Parameters:

* **API Key** API key with *allow=supervisor* permissions

Returns:

Successful result is returned if lock is either cleared or not set


.. _sfapi_restful_supervisor_message:

send broadcast message
----------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/supervisor_message.rest
    :response: http-examples/sfapi/supervisor_message.resp-rest

Parameters:

* **API Key** API key with *allow=supervisor* permissions
* **m** message text

Notes:

If master key is used, sender can be overriden with "sender" argument, which should be a dictionary and contain:

* u = message sender user

* key_id = message sender API key ID



.. _sfapi_restful_cat_remotes:

Remote controllers
==================



.. _sfapi_restful_append_controller:

connect remote controller via HTTP
----------------------------------

Connects remote :ref:`controller<sfa_remote_c>` to the local.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/append_controller.rest
    :response: http-examples/sfapi/append_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **u** Controller API uri (*proto://host:port*, port not required if default)
* **a** remote controller API key (\$key to use local key)

Optionally:

* **m** ref:`MQTT notifier<mqtt_>` to exchange item states in real time (default: *eva_1*)
* **s** verify remote SSL certificate or pass invalid
* **t** timeout (seconds) for the remote controller API calls
* **g** controller type ("uc" or "lm"), autodetected if none
* **save** save connected controller configuration on the disk immediately after creation


.. _sfapi_restful_disable_controller:

disable connected controller
----------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/disable_controller.rest
    :response: http-examples/sfapi/disable_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:

* **save** save configuration after successful call


.. _sfapi_restful_remove_controller:

disconnect controller
---------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/remove_controller.rest
    :response: http-examples/sfapi/remove_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_enable_controller:

enable connected controller
---------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/enable_controller.rest
    :response: http-examples/sfapi/enable_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:

* **save** save configuration after successful call


.. _sfapi_restful_list_remote:

get a list of items from connected controllers
----------------------------------------------

Get a list of the items loaded from the connected controllers. Useful to debug the controller connections.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/list_remote.rest
    :response: http-examples/sfapi/list_remote.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:

* **g** filter by item group
* **p** filter by item type


.. _sfapi_restful_get_controller:

get connected controller information
------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/get_controller.rest
    :response: http-examples/sfapi/get_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_list_controller_props:

get controller connection parameters
------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/list_controller_props.rest
    :response: http-examples/sfapi/list_controller_props.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_list_controllers:

get controllers list
--------------------

Get the list of all connected :ref:`controllers<sfa_remote_c>`.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/list_controllers.rest
    :response: http-examples/sfapi/list_controllers.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_reload_controller:

reload controller
-----------------

Reloads items from connected controller. If controller ID "ALL" is specified, all connected controllers are reloaded.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/reload_controller.rest
    :response: http-examples/sfapi/reload_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_upnp_rescan_controllers:

rescan controllers via UPnP
---------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/upnp_rescan_controllers.rest
    :response: http-examples/sfapi/upnp_rescan_controllers.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_set_controller_prop:

set controller connection parameters
------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/set_controller_prop.rest
    :response: http-examples/sfapi/set_controller_prop.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:

* **save** save configuration after successful call


.. _sfapi_restful_test_controller:

test connection to remote controller
------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/test_controller.rest
    :response: http-examples/sfapi/test_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_matest_controller:

test management API connection to remote controller
---------------------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/matest_controller.rest
    :response: http-examples/sfapi/matest_controller.resp-rest

Parameters:

* **API Key** API key with *master* permissions



.. _sfapi_restful_cat_clients:

Connected clients
=================



.. _sfapi_restful_reload_clients:

ask connected clients to reload
-------------------------------

Sends **reload** event to all connected clients asking them to reload the interface.

All the connected clients receive the event with *subject="reload"* and *data="asap"*. If the clients use :ref:`js_framework`, they can catch *server.reload* event.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/reload_clients.rest
    :response: http-examples/sfapi/reload_clients.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_notify_restart:

notify connected clients about server restart
---------------------------------------------

Sends a **server restart** event to all connected clients asking them to prepare for server restart.

All the connected clients receive the event with *subject="server"* and *data="restart"*. If the clients use :ref:`js_framework`, they can catch *server.restart* event.

Server restart notification is sent automatically to all connected clients when the server is restarting. This API function allows to send server restart notification without actual server restart, which may be useful e.g. for testing, handling frontend restart etc.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sfapi/notify_restart.rest
    :response: http-examples/sfapi/notify_restart.resp-rest

Parameters:

* **API Key** API key with *master* permissions



.. _sfapi_restful_cat_cvar:

CVARs
=====



.. _sfapi_restful_get_cvar:

get the value of user-defined variable
--------------------------------------

.. note::

    Even if different EVA controllers are working on the same     server, they have different sets of variables To set the variables     for each subsystem, use SYS API on the respective address/port.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/get_cvar.rest
    :response: http-examples/sysapi/get_cvar.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:


Returns:

Dict containing variable and its value. If no varible name was specified, all cvars are returned.


.. _sfapi_restful_set_cvar:

set the value of user-defined variable
--------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/set_cvar.rest
    :response: http-examples/sysapi/set_cvar.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Optionally:

* **v** variable value (if not specified, variable is deleted)



.. _sfapi_restful_cat_lock:

Locking functions
=================



.. _sfapi_restful_lock:

acquire lock
------------

Locks can be used similarly to file locking by the specific process. The difference is that SYS API tokens can be:

* centralized for several systems (any EVA server can act as lock     server)

* removed from outside

* automatically unlocked after the expiration time, if the initiator     failed or forgot to release the lock

used to restrict parallel process starting or access to system files/resources. LM PLC :doc:`macro</lm/macros>` share locks with extrnal scripts.

.. note::

    Even if different EVA controllers are working on the same server,     their lock tokens are stored in different bases. To work with the     token of each subsystem, use SYS API on the respective     address/port.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/lock.rest
    :response: http-examples/sysapi/lock.resp-rest

Parameters:

* **API Key** API key with *allow=lock* permissions

Optionally:

* **t** maximum time (seconds) to acquire lock
* **e** time after which lock is automatically released (if absent, lock may be released only via unlock function)


.. _sfapi_restful_get_lock:

get lock status
---------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/get_lock.rest
    :response: http-examples/sysapi/get_lock.resp-rest

Parameters:

* **API Key** API key with *allow=lock* permissions


.. _sfapi_restful_unlock:

release lock
------------

Releases the previously acquired lock.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/unlock.rest
    :response: http-examples/sysapi/unlock.resp-rest

Parameters:

* **API Key** API key with *allow=lock* permissions



.. _sfapi_restful_cat_logs:

Logging
=======



.. _sfapi_restful_log:

put message to log file
-----------------------

An external application can put a message in the logs on behalf of the controller.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/log.rest
    :response: http-examples/sysapi/log.resp-rest

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **l** log level
* **m** message text


.. _sfapi_restful_log_debug:

put debug message to log file
-----------------------------

An external application can put a message in the logs on behalf of the controller.

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **m** message text


.. _sfapi_restful_log_info:

put info message to log file
----------------------------

An external application can put a message in the logs on behalf of the controller.

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **m** message text


.. _sfapi_restful_log_warning:

put warning message to log file
-------------------------------

An external application can put a message in the logs on behalf of the controller.

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **m** message text


.. _sfapi_restful_log_error:

put error message to log file
-----------------------------

An external application can put a message in the logs on behalf of the controller.

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **m** message text


.. _sfapi_restful_log_critical:

put critical message to log file
--------------------------------

An external application can put a message in the logs on behalf of the controller.

Parameters:

* **API Key** API key with *sysfunc=yes* permissions
* **m** message text


.. _sfapi_restful_log_get:

get records from the controller log
-----------------------------------

Log records are stored in the controllers’ memory until restart or the time (keep_logmem) specified in controller configuration passes.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/log_get.rest
    :response: http-examples/sysapi/log_get.resp-rest

Parameters:

* **API Key** API key with *sysfunc=yes* permissions

Optionally:

* **t** get log records not older than t seconds
* **n** the maximum number of log records you want to obtain


.. _sfapi_restful_log_rotate:

rotate log file
---------------

Deprecated, not required since 3.3.0

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/log_rotate.rest
    :response: http-examples/sysapi/log_rotate.resp-rest

Parameters:

* **API Key** API key with *sysfunc=yes* permissions


.. _sfapi_restful_api_log_get:

get API call log
----------------

* API call with master permission returns all records requested

* API call with other API key returns records for the specified key   only

* API call with an authentication token returns records for the   current authorized user

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/api_log_get.rest
    :response: http-examples/sysapi/api_log_get.resp-rest

Parameters:

* **API Key** any valid API key

Optionally:

* **s** start time (timestamp or ISO or e.g. 1D for -1 day)
* **e** end time (timestamp or ISO or e.g. 1D for -1 day)
* **n** records limit
* **t** time format ("iso" or "raw" for unix timestamp, default is "raw")
* **f** record filter (requires API key with master permission)

Returns:

List of API calls

Note: API call params are returned as string and can be invalid JSON data as they're always truncated to 512 symbols in log database

Record filter should be specified either as string (k1=val1,k2=val2) or as a dict. Valid fields are:

* gw: filter by API gateway

* ip: filter by caller IP

* auth: filter by authentication type

* u: filter by user

* utp: filter by user type

* ki: filter by API key ID

* func: filter by API function

* params: filter by API call params (matches if field contains value)

* status: filter by API call status



.. _sfapi_restful_cat_keys:

API keys
========



.. _sfapi_restful_create_key:

create API key
--------------

API keys are defined statically in etc/<controller>_apikeys.ini file as well as can be created with API and stored in user database.

Keys with master permission can not be created.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/create_key.rest
    :response: http-examples/sysapi/create_key.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **save** save configuration immediately

Returns:

JSON with serialized key object


.. _sfapi_restful_destroy_key:

delete API key
--------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/destroy_key.rest
    :response: http-examples/sysapi/destroy_key.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_list_key_props:

list API key permissions
------------------------

Lists API key permissons (including a key itself)

.. note::

    API keys, defined in etc/<controller>_apikeys.ini file can not be     managed with API.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_key_props.rest
    :response: http-examples/sysapi/list_key_props.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **save** save configuration immediately


.. _sfapi_restful_list_keys:

list API keys
-------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_keys.rest
    :response: http-examples/sysapi/list_keys.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_regenerate_key:

regenerate API key
------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/regenerate_key.rest
    :response: http-examples/sysapi/regenerate_key.resp-rest

Parameters:

* **API Key** API key with *master* permissions

Returns:

JSON dict with new key value in "key" field


.. _sfapi_restful_set_key_prop:

set API key permissions
-----------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/set_key_prop.rest
    :response: http-examples/sysapi/set_key_prop.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **p** property
* **v** value (if none, permission will be revoked)
* **save** save configuration immediately



.. _sfapi_restful_cat_users:

User accounts
=============



.. _sfapi_restful_set_user_key:

assign API key to user
----------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/set_user_key.rest
    :response: http-examples/sysapi/set_user_key.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **a** API key to assign (key id, not a key itself)


.. _sfapi_restful_create_user:

create user account
-------------------

.. note::

    All changes to user accounts are instant, if the system works in     read/only mode, set it to read/write before performing user     management.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/create_user.rest
    :response: http-examples/sysapi/create_user.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **p** user password
* **a** API key to assign (key id, not a key itself)


.. _sfapi_restful_destroy_user:

delete user account
-------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/destroy_user.rest
    :response: http-examples/sysapi/destroy_user.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_get_user:

get user account info
---------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/get_user.rest
    :response: http-examples/sysapi/get_user.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_list_users:

list user accounts
------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_users.rest
    :response: http-examples/sysapi/list_users.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_set_user_password:

set user password
-----------------

Either master key and user login must be specified or a user must be logged in and a session token used

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/set_user_password.rest
    :response: http-examples/sysapi/set_user_password.resp-rest

Parameters:

* **API Key** master key or token
* **p** new password



.. _sfapi_restful_cat_notifiers:

Notifier management
===================



.. _sfapi_restful_disable_notifier:

disable notifier
----------------

.. note::

    The notifier is disabled until controller restart. To disable     notifier permanently, use notifier management CLI.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/disable_notifier.rest
    :response: http-examples/sysapi/disable_notifier.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_enable_notifier:

enable notifier
---------------

.. note::

    The notifier is enabled until controller restart. To enable     notifier permanently, use notifier management CLI.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/enable_notifier.rest
    :response: http-examples/sysapi/enable_notifier.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_get_notifier:

get notifier configuration
--------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/get_notifier.rest
    :response: http-examples/sysapi/get_notifier.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_list_notifiers:

list notifiers
--------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_notifiers.rest
    :response: http-examples/sysapi/list_notifiers.resp-rest

Parameters:

* **API Key** API key with *master* permissions



.. _sfapi_restful_cat_files:

File management
===============



.. _sfapi_restful_file_put:

put file to runtime folder
--------------------------

Puts a new file into runtime folder. If the file with such name exists, it will be overwritten. As all files in runtime are text, binary data can not be put.

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/file_put.rest
    :response: http-examples/sysapi/file_put.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **m** file content (plain text or base64-encoded)
* **b** if True - put binary file (decode base64)


.. _sfapi_restful_file_set_exec:

set file exec permission
------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/file_set_exec.rest
    :response: http-examples/sysapi/file_set_exec.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **e** *false* for 0x644, *true* for 0x755 (executable)


.. _sfapi_restful_file_unlink:

delete file from runtime folder
-------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/file_unlink.rest
    :response: http-examples/sysapi/file_unlink.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_file_get:

get file contents from runtime folder
-------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/file_get.rest
    :response: http-examples/sysapi/file_get.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **b** if True - force getting binary file (base64-encode content)



.. _sfapi_restful_cat_corescript:

Core scripts
============



.. _sfapi_restful_list_corescript_mqtt_topics:

List MQTT topics core scripts react on
--------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/list_corescript_mqtt_topics.rest
    :response: http-examples/sysapi/list_corescript_mqtt_topics.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_reload_corescripts:

Reload core scripts if some was added or deleted
------------------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/reload_corescripts.rest
    :response: http-examples/sysapi/reload_corescripts.resp-rest

Parameters:

* **API Key** API key with *master* permissions


.. _sfapi_restful_subscribe_corescripts_mqtt:

Subscribe core scripts to MQTT topic
------------------------------------

The method subscribes core scripts to topic of default MQTT notifier (eva_1). To specify another notifier, set topic as <notifer_id>:<topic>

..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/subscribe_corescripts_mqtt.rest
    :response: http-examples/sysapi/subscribe_corescripts_mqtt.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **t** MQTT topic ("+" and "#" masks are supported)
* **q** MQTT topic QoS
* **save** save core script config after modification


.. _sfapi_restful_unsubscribe_corescripts_mqtt:

Unsubscribe core scripts from MQTT topic
----------------------------------------



..  http:example:: curl wget httpie python-requests
    :request: http-examples/sysapi/unsubscribe_corescripts_mqtt.rest
    :response: http-examples/sysapi/unsubscribe_corescripts_mqtt.resp-rest

Parameters:

* **API Key** API key with *master* permissions
* **t** MQTT topic ("+" and "#" masks are allowed)
* **save** save core script config after modification


