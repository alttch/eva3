#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

__author__ = "Altertech Group, https://www.altertech.com/"
__copyright__ = "Copyright (C) 2012-2018 Altertech Group"
__license__ = "https://www.eva-ics.com/license"
__version__ = "3.1.0"

import os
import sys
import jsonpickle
import argparse
import re
import time
from datetime import datetime
import pytz

dir_lib = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(dir_lib)

from eva.client import apiclient

import eva.core
from eva.tools import print_json

timeout = None
apikey = None
apiuri = None

debug = False

default_timeout = 10

_me = 'EVA ICS UC CLI version %s' % __version__

api_functions = {
    'cvar:all': 'get_cvar',
    'cvar:get': 'get_cvar',
    'cvar:set': 'set_cvar',
    'cvar:delete': 'set_cvar',
    'debug': 'set_debug',
    'file:create': 'file_put',
    'file:upload': 'file_put',
    'file:mod': 'file_set_exec',
    'key:list': 'list_keys',
    'user:list': 'list_users',
    'user:create': 'create_user',
    'user:password': 'set_user_password',
    'user:key': 'set_user_key',
    'user:destroy': 'destroy_user',
    'history': 'state_history',
    'action:exec': 'action',
    'action:result': 'result',
    'action:enable': 'enable_actions',
    'action:disable': 'disable_actions',
    'action:terminate': 'terminate',
    'action:clear': 'q_clean',
    'action:kill': 'kill',
    'config:get': 'get_config',
    'config:save': 'save_config',
    'config:props': 'list_props',
    'config:set': 'set_prop',
    'clone:item': 'clone',
    'device:create': 'create_device',
    'device:update': 'update_device',
    'device:destroy': 'destroy_device',
    'phi:list': 'list_phi',
    'phi:get': 'get_phi',
    'phi:mods': 'list_phi_mods',
    'phi:test': 'test_phi',
    'phi:load': 'load_phi',
    'phi:unload': 'unload_phi',
    'phi:modinfo': 'modinfo_phi',
    'phi:modhelp': 'modhelp_phi',
    'lpi:mods': 'list_lpi_mods',
    'lpi:modinfo': 'modinfo_lpi',
    'lpi:modhelp': 'modhelp_lpi',
    'driver:list': 'list_drivers',
    'driver:get': 'get_driver',
    'driver:load': 'load_driver',
    'driver:unload': 'unload_driver',
    'driver:set': 'set_driver',
    'driver:unset': 'set_driver'
}


def get_api_func(itype, func):
    if func is None:
        f = api_functions.get(itype)
        return f if f else itype
    else:
        f = api_functions.get(itype + ':' + func)
        return f if f else itype + '_' + func


def _prepare_result_data(data):
    result = []
    tz = pytz.timezone(time.tzname[0])
    for d in data.copy():
        if itype == 'action':
            d['time'] = datetime.fromtimestamp(d['time']['created']).isoformat()
        elif itype == 'driver':
            if 'phi' in d:
                d['phi_mod'] = d['phi'].get('mod')
                del d['phi']
        elif itype == 'phi':
            if 'equipment' in d and isinstance(d['equipment'], list):
                d['equipment'] = ', '.join(d['equipment'])
        elif itype == 'lpi':
            if 'logic' in d and isinstance(d['logic'], list):
                d['logic'] = ', '.join(d['logic'])
        result.append(d)
    return result


_pd_cols = {
    'list_keys': ['key_id', 'master', 'sysfunc', 'allow'],
    'state': ['oid', 'action_enabled', 'status', 'value', 'nstatus', 'nvalue'],
    'state_': [
        'oid', 'virtual', 'action_enabled', 'description', 'location', 'status',
        'value', 'nstatus', 'nvalue'
    ],
    'result': [
        'time', 'uuid', 'priority', 'item_oid', 'nstatus', 'nvalue', 'exitcode',
        'status'
    ],
    'list': ['oid', 'description'],
    'list_phi_': ['id', 'mod', 'description', 'version'],
    'list_drivers_':
    ['id', 'mod', 'phi_id', 'phi_mod', 'description', 'version'],
    'list_drivers': ['id', 'mod', 'phi_id'],
    'list_phi_mods': ['mod', 'equipment', 'description', 'version', 'api'],
    'list_lpi_mods': ['mod', 'logic', 'description', 'version', 'api'],
    'modhelp_lpi': ['name', 'type', 'required', 'help'],
    'modhelp_phi': ['name', 'type', 'required', 'help']
}

_pd_idx = {
    'list_keys': 'key_id',
    'list_users': 'user',
    'state': 'oid',
    'list': 'oid',
    'result': 'time',
    'list_phi_mods': 'mod',
    'list_lpi_mods': 'mod'
}


def fancy_print_result(result, tab=0):
    if result and isinstance(result, dict):
        rprinted = False
        h = None
        out = None
        err = None
        tabsp = 10
        if api_func == 'list_props': tabsp = 28
        for v in sorted(result.keys()):
            if v == 'help' and not tab:
                h = result[v]
            elif v == 'out' and not tab:
                out = result[v]
            elif v == 'err' and not tab:
                err = result[v]
            elif v != 'result':
                if isinstance(result[v], dict):
                    if tab:
                        print(' ' * (tab * tabsp), end='>' * tab + ' ')
                    print(("{:>%u} : {}" % max(map(len, result))).format(v, ''))
                    fancy_print_result(result[v], tab + 1)
                else:
                    if tab:
                        print(' ' * (tab * tabsp), end='>' * tab + ' ')
                    if isinstance(result[v], list):
                        _r = []
                        for vv in result[v]:
                            _r.append(str(vv))
                        _v = ', '.join(_r)
                    else:
                        _v = result[v]
                    print(("{:>%u} : {}" % max(map(len, result))).format(v, _v))
                rprinted = True
        if h:
            print('-' * 81)
            print(h.strip())
            rprinted = True
        if out:
            print('-' * 81)
            print('OUTPUT:')
            print(out.strip())
            rprinted = True
        if err:
            print('-' * 81)
            print('ERROR:')
            print(err.strip())
            rprinted = True
        if not rprinted and not tab:
            print('OK')
    elif result and isinstance(result, list):
        import pandas as pd
        pd.set_option('display.expand_frame_repr', False)
        df = pd.DataFrame(data=_prepare_result_data(result))
        if api_func + api_func_full in _pd_cols:
            cols = _pd_cols[api_func + api_func_full]
        else:
            cols = list(df)
        df = df.ix[:, cols]
        try:
            idxcol = _pd_idx.get(api_func)
            if idxcol is None: idxcol = 'id'
            if idxcol in list(df):
                df.set_index(idxcol, inplace=True)
            else:
                idxcol = list(df)[0]
                df.set_index(list(df)[0], inplace=True)
            if idxcol == 'time':
                df.index = pd.to_datetime(df.index, utc=False)
            out = df.fillna(' ').to_string().split('\n')
            print(idxcol + out[0][len(idxcol):])
            print('-' * len(out[0]))
            [print(re.sub('^NaN', '   ', o)) for o in out[2:]]
        except:
            raise
    elif result:
        print(result)


ap = argparse.ArgumentParser(description=_me)
ap.add_argument(
    '-K',
    '--api-key',
    help='master key, if no key specified, local master key will be used',
    dest='_api_key',
    metavar='KEY')
ap.add_argument(
    '-U', '--api-url', help='API URL', dest='_api_uri', metavar='URL')
ap.add_argument(
    '-T',
    '--api-timeout',
    help='API request timeout (in seconds)',
    type=float,
    default=default_timeout,
    dest='_timeout',
    metavar='TIMEOUT')
ap.add_argument(
    '-J',
    '--json',
    help='print result as JSON',
    action='store_true',
    dest='_json',
    default=False)
ap.add_argument(
    '-D',
    '--debug',
    help='enable debug messages',
    action='store_true',
    dest='_debug',
    default=False)

sp = ap.add_subparsers(dest='_type', metavar='command', help='command or type')

# PRIMARY
ap_test = sp.add_parser('test', help='API test')
ap_save = sp.add_parser('save', help='Save item state and config')

# CMD
ap_cmd = sp.add_parser('cmd', help='Execute remote command')
ap_cmd.add_argument('c', help='Command to execute', metavar='CMD')
ap_cmd.add_argument(
    '-a', '--args', help='Command arguments', metavar='ARGS', dest='a')
ap_cmd.add_argument(
    '-w',
    '--wait',
    help='Wait for command finish',
    metavar='SEC',
    type=float,
    dest='w')
ap_cmd.add_argument(
    '-t',
    '--timeout',
    help='Command timeout',
    metavar='SEC',
    type=float,
    dest='t')

# Locks
ap_lock = sp.add_parser('lock', help='acquire lock')
ap_lock.add_argument('l', help='Lock ID', metavar='ID')
ap_lock.add_argument(
    '-t',
    '--timeout',
    help='Max acquire wait time',
    metavar='SEC',
    type=float,
    dest='t')
ap_lock.add_argument(
    '-e',
    '--expires',
    help='Lock expire time',
    metavar='SEC',
    type=float,
    dest='e')
ap_unlock = sp.add_parser('unlock', help='release lock')
ap_unlock.add_argument('l', help='Lock ID', metavar='ID')

# Logs
ap_log = sp.add_parser('log', help='Log functions')
sp_log = ap_log.add_subparsers(
    dest='_func', metavar='func', help='Log commands')
sp_log_rotate = sp_log.add_parser('rotate', help='Rotate logs')
sp_log_debug = sp_log.add_parser('debug', help='Send debug message')
sp_log_debug.add_argument('m', help='Message', metavar='MSG')
sp_log_info = sp_log.add_parser('info', help='Send info message')
sp_log_info.add_argument('m', help='Message', metavar='MSG')
sp_log_warning = sp_log.add_parser('warning', help='Send warning message')
sp_log_warning.add_argument('m', help='Message', metavar='MSG')
sp_log_error = sp_log.add_parser('error', help='Send error message')
sp_log_error.add_argument('m', help='Message', metavar='MSG')
sp_log_critical = sp_log.add_parser('critical', help='Send critical message')
sp_log_critical.add_argument('m', help='Message', metavar='MSG')

# CVAR
ap_cvar = sp.add_parser('cvar', help='CVAR functions')
sp_cvar = ap_cvar.add_subparsers(
    dest='_func', metavar='func', help='CVAR commands')
sp_cvar_all = sp_cvar.add_parser('all', help='Get all CVARS')
sp_cvar_get = sp_cvar.add_parser('get', help='Get CVAR value')
sp_cvar_get.add_argument('i', help='CVAR ID', metavar='ID')
sp_cvar_set = sp_cvar.add_parser('set', help='Set CVAR value')
sp_cvar_set.add_argument('i', help='CVAR ID', metavar='ID')
sp_cvar_set.add_argument('v', help='Value', metavar='VALUE')
sp_cvar_delete = sp_cvar.add_parser('delete', help='Delete CVAR')
sp_cvar_delete.add_argument('i', help='CVAR ID', metavar='ID')

# DEBUG
ap_debug = sp.add_parser('debug', help='Debug control')
ap_debug.add_argument(
    'debug', help='Debug mode (on/off)', metavar='MODE', choices=['on', 'off'])

# File functions

ap_file = sp.add_parser('file', help='File management in runtime folder')
sp_file = ap_file.add_subparsers(
    dest='_func', metavar='func', help='File commands')

sp_file_get = sp_file.add_parser('get', help='Download file')
sp_file_get.add_argument(
    'i',
    help='File name (relative to runtime, without / in the beginning)',
    metavar='REMOTE_FILE')
sp_file_get.add_argument('_fname', help='Local file name', metavar='LOCAL_FILE')

sp_file_upload = sp_file.add_parser('upload', help='Upload file')
sp_file_upload.add_argument(
    '_fname', help='Local file name', metavar='LOCAL_FILE')
sp_file_upload.add_argument(
    'i',
    help='File name (relative to runtime, without / in the beginning)',
    metavar='REMOTE_FILE')

sp_file_create = sp_file.add_parser(
    'create', help='Create file with a content given in a command line')
sp_file_create.add_argument(
    'i',
    help='File name (relative to runtime, without / in the beginning)',
    metavar='REMOTE_FILE')
sp_file_create.add_argument('m', help='File content', metavar='CONTENT')

sp_file_mod = sp_file.add_parser('mod', help='Set file exec mode')
sp_file_mod.add_argument(
    'i',
    help='File name (relative to runtime, without / in the beginning)',
    metavar='REMOTE_FILE')
sp_file_mod.add_argument(
    'e',
    help='Exec mode (0 - disabled [0644], 1 - enabled [0755])',
    metavar='MODE')

sp_file_unlink = sp_file.add_parser('unlink', help='Delete remote file')
sp_file_unlink.add_argument(
    'i',
    help='File name (relative to runtime, without / in the beginning)',
    metavar='REMOTE_FILE')

# Key management

ap_key = sp.add_parser('key', help='API key management')
sp_key = ap_key.add_subparsers(
    dest='_func', metavar='func', help='API key commands')

sp_key_list = sp_key.add_parser('list', help='List API keys')

# User management

ap_user = sp.add_parser('user', help='user management')
sp_user = ap_user.add_subparsers(
    dest='_func', metavar='func', help='user commands')

sp_user_list = sp_user.add_parser('list', help='List users')

sp_user_create = sp_user.add_parser('create', help='Create new user')
sp_user_create.add_argument('u', help='User login', metavar='LOGIN')
sp_user_create.add_argument('p', help='User password', metavar='PASSWORD')
sp_user_create.add_argument('a', help='API key ID', metavar='APIKEY_ID')

sp_user_password = sp_user.add_parser(
    'password', help='Change password for user')
sp_user_password.add_argument('u', help='User login', metavar='LOGIN')
sp_user_password.add_argument('p', help='User password', metavar='PASSWORD')

sp_user_key = sp_user.add_parser('key', help='Change API key for user')
sp_user_key.add_argument('u', help='User login', metavar='LOGIN')
sp_user_key.add_argument('a', help='API key ID', metavar='APIKEY_ID')

sp_user_destroy = sp_user.add_parser('destroy', help='Delete user')
sp_user_destroy.add_argument('u', help='User login', metavar='LOGIN')

# UC Common
sp_state = sp.add_parser('state', help='Get item state')
sp_state.add_argument(
    'i',
    help='Item ID (specify either ID or item type)',
    metavar='ID',
    nargs='?')
sp_state.add_argument(
    '-g', '--group', help='Item group', metavar='GROUP', dest='g')
sp_state.add_argument(
    '-p',
    '--type',
    help='Item type',
    metavar='TYPE',
    dest='p',
    choices=['unit', 'sensor', 'U', 'S'])
sp_state.add_argument(
    '-y',
    '--full',
    help='full information about item',
    dest='_full',
    action='store_true')

sp_history = sp.add_parser('history', help='Get item state history')
sp_history.add_argument(
    'i',
    help='Item ID or multiple IDs (-w param is required), comma separated',
    metavar='ID')
sp_history.add_argument(
    '-a',
    '--notifier',
    help='Notifier to get history from (default: db_1)',
    metavar='NOTIFIER',
    dest='a')
sp_history.add_argument(
    '-s', '--time-start', help='Start time', metavar='TIME', dest='s')
sp_history.add_argument(
    '-e', '--time-end', help='End time', metavar='TIME', dest='e')
sp_history.add_argument(
    '-l',
    '--limit',
    help='Records limit (doesn\'t work with fill)',
    metavar='N',
    dest='l')
sp_history.add_argument(
    '-x',
    '--prop',
    help='Item state prop (status or value)',
    metavar='PROP',
    dest='x',
    choices=['status', 'value', 'S', 'V'])
sp_history.add_argument(
    '-w',
    '--fill',
    help='Fill (i.e. 1T - 1 min, 2H - 2 hours), requires start time',
    metavar='INTERVAL',
    dest='w')

sp_update = sp.add_parser('update', help='Update item state')
sp_update.add_argument('i', help='Item ID', metavar='ID')
sp_update.add_argument(
    '-s', '--status', help='Item status', metavar='STATUS', type=int, dest='s')
sp_update.add_argument(
    '-v', '--value', help='Item value', metavar='VALUE', dest='v')

# Actions
ap_action = sp.add_parser('action', help='Unit actions')

sp_action = ap_action.add_subparsers(
    dest='_func', metavar='func', help='Action commands')

sp_action_enable = sp_action.add_parser('enable', help='Enable unit actions')
sp_action_enable.add_argument('i', help='Unit ID', metavar='ID')

sp_action_disable = sp_action.add_parser('disable', help='Disable unit actions')
sp_action_disable.add_argument('i', help='Unit ID', metavar='ID')

sp_action_exec = sp_action.add_parser('exec', help='Execute unit action')
sp_action_exec.add_argument('i', help='Unit ID', metavar='ID')
sp_action_exec.add_argument('s', help='New status', metavar='STATUS')
sp_action_exec.add_argument(
    '-v', '--value', help='New value', metavar='VALUE', dest='v')
sp_action_exec.add_argument(
    '-p',
    '--priority',
    help='Action priority',
    metavar='PRIORITY',
    type=int,
    dest='p')
sp_action_exec.add_argument(
    '-w',
    '--wait',
    help='Wait for complete',
    metavar='SEC',
    type=float,
    dest='w')
sp_action_exec.add_argument(
    '-q',
    '--queue-timeout',
    help='Max queue timeout',
    metavar='SEC',
    type=float,
    dest='q')
sp_action_exec.add_argument(
    '-u', '--uuid', help='Custom action uuid', metavar='UUID', dest='u')

sp_action_toggle = sp_action.add_parser(
    'toggle', help='Execute unit toggle action')
sp_action_toggle.add_argument('i', help='Unit ID', metavar='ID')
sp_action_toggle.add_argument(
    '-p',
    '--priority',
    help='Action priority',
    metavar='PRIORITY',
    type=int,
    dest='p')
sp_action_toggle.add_argument(
    '-w',
    '--wait',
    help='Wait for complete',
    metavar='SEC',
    type=float,
    dest='w')
sp_action_toggle.add_argument(
    '-q',
    '--queue-timeout',
    help='Max queue timeout',
    metavar='SEC',
    type=float,
    dest='q')
sp_action_toggle.add_argument(
    '-u', '--uuid', help='Custom action uuid', metavar='UUID', dest='u')

sp_action_terminate = sp_action.add_parser(
    'terminate', help='Terminate unit action')
sp_action_terminate.add_argument('i', help='Unit ID', metavar='ID', nargs='?')
sp_action_terminate.add_argument(
    '-u', '--uuid', help='Action uuid', metavar='UUID', dest='u')

sp_action_qclean = sp_action.add_parser(
    'clear', help='Clean up unit action queue')
sp_action_qclean.add_argument('i', help='Unit ID', metavar='ID')

sp_action_kill = sp_action.add_parser(
    'kill', help='Terminate action and clean queue')
sp_action_kill.add_argument('i', help='Unit ID', metavar='ID')

sp_action_result = sp_action.add_parser(
    'result', help='Get unit action results')
sp_action_result.add_argument(
    '-i', '--id', help='Unit ID', metavar='ID', dest='i')
sp_action_result.add_argument(
    '-u', '--uuid', help='Action UUID', metavar='UUID', dest='u')
sp_action_result.add_argument(
    '-g', '--group', help='Unit group', metavar='GROUP', dest='g')
sp_action_result.add_argument(
    '-s',
    '--state',
    help='Action state',
    metavar='STATE',
    dest='s',
    choices=['queued', 'running', 'finished', 'Q', 'R', 'F'])

# Configure items

sp_list = sp.add_parser('list', help='List items')
sp_list.add_argument(
    '-g', '--group', help='Filter by group', metavar='GROUP', dest='g')
sp_list.add_argument(
    '-p',
    '--type',
    help='Filter by type',
    metavar='TYPE',
    dest='p',
    choices=['unit', 'sensor', 'mu', 'U', 'S'])

ap_config = sp.add_parser('config', help='Item configuration')
sp_config = ap_config.add_subparsers(
    dest='_func', metavar='func', help='Configuration commands')

sp_config_get = sp_config.add_parser('get', help='Get item config')
sp_config_get.add_argument('i', help='Item ID', metavar='ID')

sp_config_save = sp_config.add_parser('save', help='Save item config')
sp_config_save.add_argument('i', help='Item ID', metavar='ID')

sp_list_props = sp_config.add_parser('props', help='List item config props')
sp_list_props.add_argument('i', help='Item ID', metavar='ID')

sp_set_prop = sp_config.add_parser('set', help='Set item config prop')
sp_set_prop.add_argument('i', help='Item ID', metavar='ID')
sp_set_prop.add_argument('p', help='Config property', metavar='PROP')
sp_set_prop.add_argument('v', help='Value', metavar='VAL', nargs='?')
sp_set_prop.add_argument(
    '-y',
    '--save',
    help='Save item config after set',
    dest='_save',
    action='store_true')

ap_create = sp.add_parser('create', help='Create new item')
ap_create.add_argument('i', help='Item OID (type:group/id)', metavar='OID')
ap_create.add_argument(
    '-y',
    '--save',
    help='Save item config after creation',
    dest='_save',
    action='store_true')
ap_create.add_argument(
    '-z',
    '--virtual',
    help='Create virtual item',
    dest='_virtual',
    action='store_true')

ap_clone = sp.add_parser('clone', help='Clone items')
sp_clone = ap_clone.add_subparsers(
    dest='_func', metavar='func', help='Cloning commands')

sp_clone_item = sp_clone.add_parser('item', help='Clone single item')
sp_clone_item.add_argument('i', help='Item ID', metavar='ID')
sp_clone_item.add_argument('n', help='New item ID (short)', metavar='ID')
sp_clone_item.add_argument(
    '-g', '--group', help='Group for new item', metavar='GROUP', dest='g')
sp_clone_item.add_argument(
    '-y',
    '--save',
    help='Save item config after cloning',
    dest='_save',
    action='store_true')

sp_clone_group = sp_clone.add_parser('group', help='Clone group of the items')
sp_clone_group.add_argument('g', help='Source group', metavar='SRC_GROUP')
sp_clone_group.add_argument('n', help='Target group', metavar='TGT_GROUP')
sp_clone_group.add_argument('p', help='Source items prefix', metavar='SRC_PFX')
sp_clone_group.add_argument('r', help='Target items prefix', metavar='TGT_PFX')
sp_clone_group.add_argument(
    '-y',
    '--save',
    help='Save items config after cloning',
    dest='_save',
    action='store_true')

ap_destroy = sp.add_parser('destroy', help='Delete item')
ap_destroy.add_argument('i', help='Item ID', metavar='ID', nargs='?')
ap_destroy.add_argument(
    '-g', '--group', help='Destroy group of items', dest='g')

# Devices

ap_device = sp.add_parser('device', help='Device management')
sp_device = ap_device.add_subparsers(
    dest='_func', metavar='func', help='Device commands')
sp_device_create = sp_device.add_parser(
    'create', help='Create device with a template')
sp_device_create.add_argument(
    't', help='Template name (file=runtime/tpl/<TPL>.json)', metavar='TPL')
sp_device_create.add_argument(
    '-c',
    '--config',
    help='Template vars, comma separated',
    metavar='VARS',
    dest='c')
sp_device_create.add_argument(
    '-y',
    '--save',
    help='Save items config after creation',
    dest='_save',
    action='store_true')

sp_device_update = sp_device.add_parser(
    'update', help='Update device item props with a template')
sp_device_update.add_argument(
    't', help='Template file (in runtime/tpl folder)', metavar='TPL')
sp_device_update.add_argument(
    '-c',
    '--config',
    help='Template vars, comma separated',
    metavar='VARS',
    dest='c')
sp_device_update.add_argument(
    '-y',
    '--save',
    help='Save items config after creation',
    dest='_save',
    action='store_true')

sp_device_destroy = sp_device.add_parser(
    'destroy', help='Destroy device with a template')
sp_device_destroy.add_argument(
    't', help='Template file (in runtime/tpl folder)', metavar='TPL')
sp_device_destroy.add_argument(
    '-c',
    '--config',
    help='Template vars, comma separated',
    metavar='VARS',
    dest='c')

# Drivers
ap_phi = sp.add_parser('phi', help='PHI (Physical interface)')
ap_lpi = sp.add_parser('lpi', help='LPI (Logical to physical interface)')
ap_driver = sp.add_parser('driver', help='Drivers ( PHI + LPI )')

sp_phi = ap_phi.add_subparsers(
    dest='_func', metavar='func', help='PHI commands')
sp_lpi = ap_lpi.add_subparsers(
    dest='_func', metavar='func', help='LPI commands')
sp_driver = ap_driver.add_subparsers(
    dest='_func', metavar='func', help='Driver commands')

sp_phi_list = sp_phi.add_parser('list', help='List loaded PHIs')
sp_phi_list.add_argument(
    '-y',
    '--full',
    help='full information about PHI',
    dest='_full',
    action='store_true')
sp_driver_list = sp_driver.add_parser('list', help='List loaded drivers')
sp_driver_list.add_argument(
    '-y',
    '--full',
    help='full information about driver',
    dest='_full',
    action='store_true')

sp_phi_get = sp_phi.add_parser('get', help='Get loaded PHI info')
sp_phi_get.add_argument('i', help='PHI ID', metavar='PHI_ID')

sp_phi_mods = sp_phi.add_parser('mods', help='List available PHI mods')
sp_lpi_mods = sp_lpi.add_parser('mods', help='List available LPI mods')

sp_phi_test = sp_phi.add_parser('test', help='Send test call to PHI')
sp_phi_test.add_argument('i', help='PHI ID', metavar='PHI_ID')
sp_phi_test.add_argument('c', help='PHI test command', metavar='CMD')

sp_driver_get = sp_driver.add_parser('get', help='Get loaded driver info')
sp_driver_get.add_argument('i', help='Driver ID', metavar='DRIVER_ID')

sp_phi_load = sp_phi.add_parser('load', help='Load PHI')
sp_phi_load.add_argument('i', help='PHI ID', metavar='PHI_ID')
sp_phi_load.add_argument('m', help='PHI module', metavar='PHI_MOD')
sp_phi_load.add_argument(
    '-c',
    '--config',
    help='PHI configuration values, comma separated',
    dest='c',
    metavar='CONFIG')
sp_phi_load.add_argument(
    '-y',
    '--save',
    help='save configuration on success load',
    dest='_save',
    action='store_true')

sp_driver_load = sp_driver.add_parser('load', help='Load driver')
sp_driver_load.add_argument(
    'i', help='Driver ID (PHI_ID.LPI.ID)', metavar='PHI_ID.LPI_ID')
sp_driver_load.add_argument('m', help='LPI module', metavar='LPI_MOD')
sp_driver_load.add_argument(
    '-c',
    '--config',
    help='driver configuration values, comma separated',
    dest='c',
    metavar='CONFIG')
sp_driver_load.add_argument(
    '-y',
    '--save',
    help='save configuration on success load',
    dest='_save',
    action='store_true')

sp_phi_unload = sp_phi.add_parser('unload', help='Unload PHI')
sp_phi_unload.add_argument('i', help='PHI ID', metavar='PHI_ID')

sp_driver_unload = sp_driver.add_parser('unload', help='Unload driver')
sp_driver_unload.add_argument('i', help='Driver ID', metavar='DRIVER_ID')

sp_driver_set = sp_driver.add_parser(
    'set', help='Set for the item (action & update)')
sp_driver_set.add_argument('i', help='Item ID', metavar='ID')
sp_driver_set.add_argument('d', help='Driver ID', metavar='DRIVER_ID')
sp_driver_set.add_argument(
    '-c',
    '--config',
    help='item driver config (ports etc.)',
    dest='c',
    metavar='CONFIG')
sp_driver_set.add_argument(
    '-y',
    '--save',
    help='save configuration',
    dest='_save',
    action='store_true')

sp_driver_unset = sp_driver.add_parser(
    'unset',
    help='Unset for the item (set action, update and driver_config to null)')
sp_driver_unset.add_argument('i', help='Item ID', metavar='ID')
sp_driver_unset.add_argument(
    '-y',
    '--save',
    help='save configuration',
    dest='_save',
    action='store_true')

sp_phi_modinfo = sp_phi.add_parser('modinfo', help='PHI module info')
sp_phi_modinfo.add_argument('i', help='PHI module', metavar='PHI_MOD')

sp_lpi_modinfo = sp_lpi.add_parser('modinfo', help='LPI module info')
sp_lpi_modinfo.add_argument('i', help='LPI module', metavar='LPI_MOD')

sp_phi_modhelp = sp_phi.add_parser('modhelp', help='PHI module help')
sp_phi_modhelp.add_argument('i', help='PHI module', metavar='PHI_MOD')
sp_phi_modhelp.add_argument(
    'c',
    help='Help context (cfg, get, set)',
    metavar='CONTEXT',
    choices=['cfg', 'get', 'set'])

sp_lpi_modhelp = sp_lpi.add_parser('modhelp', help='LPI module help')
sp_lpi_modhelp.add_argument('i', help='LPI module', metavar='LPI_MOD')
sp_lpi_modhelp.add_argument(
    'c',
    help='Help context (cfg, action, update)',
    metavar='CONTEXT',
    choices=['cfg', 'action', 'update'])

try:
    import argcomplete
    argcomplete.autocomplete(ap)
except:
    pass

a = ap.parse_args()

params = vars(a).copy()

itype = a._type

for p in params.copy().keys():
    if p[0] == '_':
        del params[p]

if not itype:
    ap.print_help()
    sys.exit(99)

if hasattr(a, '_func'):
    func = a._func
else:
    func = None

if itype in [
        'log', 'action', 'config', 'cvar', 'device', 'phi', 'lpi', 'driver',
        'file', 'key', 'user'
] and func is None:
    ap.parse_args([itype, '--help'])

debug = a._debug

api_func = get_api_func(itype, func)

if not api_func:
    ap.print_help()
    sys.exit(99)

apiuri = a._api_uri
apikey = a._api_key

if not apiuri:
    try:
        api = apiclient.APIClientLocal('uc')
    except:
        print('Can not init API, uc.ini or uc_apikeys.ini missing?')
        sys.exit(98)
else:
    api = apiclient.APIClient()
    api.set_uri(apiuri)
    api.set_product('uc')

if apikey is not None:
    api.set_key(apikey)

api.ssl_verify(False)

if hasattr(a, '_full') and a._full:
    params['full'] = 1
    api_func_full = '_'
else:
    api_func_full = ''

if hasattr(a, '_virtual') and a._virtual:
    params['virtual'] = 1

if hasattr(a, '_save') and a._save:
    params['save'] = 1

if api_func == 'load_driver':
    try:
        params['p'], params['i'] = params['i'].split('.')
    except:
        print("Invalid driver ID")
        sys.exit(98)

if api_func == 'file_put' and a._func == 'upload':
    try:
        params['m'] = ''.join(open(a._fname).readlines())
    except:
        raise
        print('Unable to open %s' % a._fname)
        sys.exit(97)

timeout = a._timeout

if debug:
    print('API:', api._uri)
    print('API func:', api_func)
    print('timeout:', timeout)
    print('params', params)
code, result = api.call(api_func, params, timeout, _debug=debug)

if code != apiclient.result_ok and \
        code != apiclient.result_func_failed:
    if code == apiclient.result_not_found:
        print('Error: Object not found')
    elif code == apiclient.result_forbidden:
        print('Error: Forbidden')
    elif code == apiclient.result_api_error:
        print('Error: API error')
    elif code == apiclient.result_unknown_error:
        print('Error: Unknown error')
    elif code == apiclient.result_not_ready:
        print('Error: API not ready')
    elif code == apiclient.result_func_unknown:
        ap.print_help()
    elif code == apiclient.result_server_error:
        print('Error: Server error')
    elif code == apiclient.result_server_timeout:
        print('Error: Server timeout')
    elif code == apiclient.result_bad_data:
        print('Error: Bad data')
    elif code == apiclient.result_invalid_params:
        print('Error: invalid params')
    if debug:
        print('API result code: %u' % code)
    sys.exit(code)
else:
    if api_func == 'file_get':
        try:
            open(a._fname, 'w').write(result['data'])
            print('OK')
        except:
            print('FAILED')
            sys.exit(95)
    elif a._json or api_func in ['get_config']:
        print_json(result)
        if 'result' in result and result['result'] == 'ERROR':
            sys.exit(apiclient.result_func_failed)
    else:
        if code == apiclient.result_func_failed and api_func not in [
                'cmd', 'action', 'action_toggle'
        ]:
            print('FAILED')
        elif 'result' in result and api_func != 'test':
            print(result['result'])
            if result['result'] == 'ERROR':
                sys.exit(apiclient.result_func_failed)
        elif api_func == 'state_history' and \
                isinstance(result, dict) and 't' in result:
            import pandas as pd
            import pytz
            from datetime import datetime
            pd.set_option('display.expand_frame_repr', False)
            # convert list to dict
            res = []
            for i in range(len(result['t'])):
                r = {}
                for k in result.keys():
                    if k != 't':
                        r[k] = result[k][i]
                    else:
                        r[k] = datetime.fromtimestamp(result[k][i]).isoformat()
                res.append(r)
            df = pd.DataFrame(res)
            df = df.set_index('t')
            df.index = pd.to_datetime(df.index, utc=False)
            out = df.to_string().split('\n')
            print('time' + out[0][4:])
            print('-' * len(out[0]))
            [print(o) for o in out[2:]]
        else:
            if result:
                fancy_print_result(result)
sys.exit(code)
