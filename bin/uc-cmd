#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

__author__ = "Altertech Group, https://www.altertech.com/"
__copyright__ = "Copyright (C) 2012-2018 Altertech Group"
__license__ = "https://www.eva-ics.com/license"
__version__ = "3.1.0"

import sys
import os
from datetime import datetime

dir_lib = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(dir_lib)

from eva.client.cli import GenericCLI
from eva.client import apiclient

_me = 'EVA ICS UC CLI version %s' % __version__

_api_functions = {
    'history': 'state_history',
    'action:exec': 'action',
    'action:result': 'result',
    'action:enable': 'enable_actions',
    'action:disable': 'disable_actions',
    'action:terminate': 'terminate',
    'action:clear': 'q_clean',
    'action:kill': 'kill',
    'config:get': 'get_config',
    'config:save': 'save_config',
    'config:props': 'list_props',
    'config:set': 'set_prop',
    'clone:item': 'clone',
    'device:create': 'create_device',
    'device:update': 'update_device',
    'device:destroy': 'destroy_device',
    'phi:list': 'list_phi',
    'phi:get': 'get_phi',
    'phi:mods': 'list_phi_mods',
    'phi:test': 'test_phi',
    'phi:load': 'load_phi',
    'phi:unload': 'unload_phi',
    'phi:modinfo': 'modinfo_phi',
    'phi:modhelp': 'modhelp_phi',
    'lpi:mods': 'list_lpi_mods',
    'lpi:modinfo': 'modinfo_lpi',
    'lpi:modhelp': 'modhelp_lpi',
    'driver:list': 'list_drivers',
    'driver:get': 'get_driver',
    'driver:load': 'load_driver',
    'driver:unload': 'unload_driver',
    'driver:set': 'set_driver',
    'driver:unset': 'set_driver'
}

_pd_cols = {
    'state': ['oid', 'action_enabled', 'status', 'value', 'nstatus', 'nvalue'],
    'state_': [
        'oid', 'virtual', 'action_enabled', 'description', 'location', 'status',
        'value', 'nstatus', 'nvalue'
    ],
    'result': [
        'time', 'uuid', 'priority', 'item_oid', 'nstatus', 'nvalue', 'exitcode',
        'status'
    ],
    'list': ['oid', 'description'],
    'list_phi_': ['id', 'mod', 'description', 'version'],
    'list_drivers_':
    ['id', 'mod', 'phi_id', 'phi_mod', 'description', 'version'],
    'list_drivers': ['id', 'mod', 'phi_id'],
    'list_phi_mods': ['mod', 'equipment', 'description', 'version', 'api'],
    'list_lpi_mods': ['mod', 'logic', 'description', 'version', 'api'],
    'modhelp_lpi': ['name', 'type', 'required', 'help'],
    'modhelp_phi': ['name', 'type', 'required', 'help']
}

_pd_idx = {
    'list_keys': 'key_id',
    'list_users': 'user',
    'state': 'oid',
    'list': 'oid',
    'result': 'time',
    'list_phi_mods': 'mod',
    'list_lpi_mods': 'mod'
}

_fancy_tabsp = {'list_props': 26, 'get_phi': 14, 'get_driver': 12}

_always_json = ['get_config']


class UC_CLI(GenericCLI):

    def prepare_result_data(self, data, api_func, api_func_full, itype):
        if itype not in ['action', 'driver', 'phi', 'lpi']:
            return super().prepare_result_data(data, api_func, api_func_full,
                                               itype)
        result = []
        for d in data.copy():
            if itype == 'action':
                d['time'] = datetime.fromtimestamp(
                    d['time']['created']).isoformat()
            elif itype == 'driver':
                if 'phi' in d:
                    d['phi_mod'] = d['phi'].get('mod')
                    del d['phi']
                    del d['phi']['help']
            elif itype == 'phi':
                if 'equipment' in d and isinstance(d['equipment'], list):
                    d['equipment'] = ', '.join(d['equipment'])
            elif itype == 'lpi':
                if 'logic' in d and isinstance(d['logic'], list):
                    d['logic'] = ', '.join(d['logic'])
            result.append(d)
        return result

    def process_result(self, result, code, api_func, api_func_full, itype, a):
        if api_func == 'state_history' and \
                isinstance(result, dict):
            self.print_tdf(result, 't')
            return 0
        else:
            return super().process_result(result, code, api_func, api_func_full,
                                          itype, a)

    def prepare_run(self, api_func, params, a):
        if api_func == 'load_driver':
            try:
                params['p'], params['i'] = params['i'].split('.')
            except:
                print("Invalid driver ID")
                return 98
        return super().prepare_run(api_func, params, a)

    def add_functions(self):
        super().add_functions()
        self.add_uc_common_functions()
        self.add_uc_action_functions()
        self.add_uc_configure_functions()
        self.add_uc_device_functions()
        self.add_uc_driver_functions()

    def add_uc_common_functions(self):
        sp_state = self.sp.add_parser('state', help='Get item state')
        sp_state.add_argument(
            'i',
            help='Item ID (specify either ID or item type)',
            metavar='ID',
            nargs='?')
        sp_state.add_argument(
            '-g', '--group', help='Item group', metavar='GROUP', dest='g')
        sp_state.add_argument(
            '-p',
            '--type',
            help='Item type',
            metavar='TYPE',
            dest='p',
            choices=['unit', 'sensor', 'U', 'S'])
        sp_state.add_argument(
            '-y',
            '--full',
            help='Full information about item',
            dest='_full',
            action='store_true')

        sp_history = self.sp.add_parser(
            'history', help='Get item state history')
        sp_history.add_argument(
            'i',
            help=
            'Item ID or multiple IDs (-w param is required), comma separated',
            metavar='ID')
        sp_history.add_argument(
            '-a',
            '--notifier',
            help='Notifier to get history from (default: db_1)',
            metavar='NOTIFIER',
            dest='a')
        sp_history.add_argument(
            '-s', '--time-start', help='Start time', metavar='TIME', dest='s')
        sp_history.add_argument(
            '-e', '--time-end', help='End time', metavar='TIME', dest='e')
        sp_history.add_argument(
            '-l',
            '--limit',
            help='Records limit (doesn\'t work with fill)',
            metavar='N',
            dest='l')
        sp_history.add_argument(
            '-x',
            '--prop',
            help='Item state prop (status or value)',
            metavar='PROP',
            dest='x',
            choices=['status', 'value', 'S', 'V'])
        sp_history.add_argument(
            '-w',
            '--fill',
            help='Fill (i.e. 1T - 1 min, 2H - 2 hours), requires start time',
            metavar='INTERVAL',
            dest='w')

        sp_update = self.sp.add_parser('update', help='Update item state')
        sp_update.add_argument('i', help='Item ID', metavar='ID')
        sp_update.add_argument(
            '-s',
            '--status',
            help='Item status',
            metavar='STATUS',
            type=int,
            dest='s')
        sp_update.add_argument(
            '-v', '--value', help='Item value', metavar='VALUE', dest='v')

    def add_uc_action_functions(self):
        ap_action = self.sp.add_parser('action', help='Unit actions')

        sp_action = ap_action.add_subparsers(
            dest='_func', metavar='func', help='Action commands')

        sp_action_enable = sp_action.add_parser(
            'enable', help='Enable unit actions')
        sp_action_enable.add_argument('i', help='Unit ID', metavar='ID')

        sp_action_disable = sp_action.add_parser(
            'disable', help='Disable unit actions')
        sp_action_disable.add_argument('i', help='Unit ID', metavar='ID')

        sp_action_exec = sp_action.add_parser(
            'exec', help='Execute unit action')
        sp_action_exec.add_argument('i', help='Unit ID', metavar='ID')
        sp_action_exec.add_argument('s', help='New status', metavar='STATUS')
        sp_action_exec.add_argument(
            '-v', '--value', help='New value', metavar='VALUE', dest='v')
        sp_action_exec.add_argument(
            '-p',
            '--priority',
            help='Action priority',
            metavar='PRIORITY',
            type=int,
            dest='p')
        sp_action_exec.add_argument(
            '-w',
            '--wait',
            help='Wait for complete',
            metavar='SEC',
            type=float,
            dest='w')
        sp_action_exec.add_argument(
            '-q',
            '--queue-timeout',
            help='Max queue timeout',
            metavar='SEC',
            type=float,
            dest='q')
        sp_action_exec.add_argument(
            '-u', '--uuid', help='Custom action uuid', metavar='UUID', dest='u')

        sp_action_toggle = sp_action.add_parser(
            'toggle', help='Execute unit toggle action')
        sp_action_toggle.add_argument('i', help='Unit ID', metavar='ID')
        sp_action_toggle.add_argument(
            '-p',
            '--priority',
            help='Action priority',
            metavar='PRIORITY',
            type=int,
            dest='p')
        sp_action_toggle.add_argument(
            '-w',
            '--wait',
            help='Wait for complete',
            metavar='SEC',
            type=float,
            dest='w')
        sp_action_toggle.add_argument(
            '-q',
            '--queue-timeout',
            help='Max queue timeout',
            metavar='SEC',
            type=float,
            dest='q')
        sp_action_toggle.add_argument(
            '-u', '--uuid', help='Custom action uuid', metavar='UUID', dest='u')

        sp_action_terminate = sp_action.add_parser(
            'terminate', help='Terminate unit action')
        sp_action_terminate.add_argument(
            'i', help='Unit ID', metavar='ID', nargs='?')
        sp_action_terminate.add_argument(
            '-u', '--uuid', help='Action uuid', metavar='UUID', dest='u')

        sp_action_qclean = sp_action.add_parser(
            'clear', help='Clean up unit action queue')
        sp_action_qclean.add_argument('i', help='Unit ID', metavar='ID')

        sp_action_kill = sp_action.add_parser(
            'kill', help='Terminate action and clean queue')
        sp_action_kill.add_argument('i', help='Unit ID', metavar='ID')

        sp_action_result = sp_action.add_parser(
            'result', help='Get unit action results')
        sp_action_result.add_argument(
            '-i', '--id', help='Unit ID', metavar='ID', dest='i')
        sp_action_result.add_argument(
            '-u', '--uuid', help='Action UUID', metavar='UUID', dest='u')
        sp_action_result.add_argument(
            '-g', '--group', help='Unit group', metavar='GROUP', dest='g')
        sp_action_result.add_argument(
            '-s',
            '--state',
            help='Action state',
            metavar='STATE',
            dest='s',
            choices=['queued', 'running', 'finished', 'Q', 'R', 'F'])

    def add_uc_configure_functions(self):
        sp_list = self.sp.add_parser('list', help='List items')
        sp_list.add_argument(
            '-g', '--group', help='Filter by group', metavar='GROUP', dest='g')
        sp_list.add_argument(
            '-p',
            '--type',
            help='Filter by type',
            metavar='TYPE',
            dest='p',
            choices=['unit', 'sensor', 'mu', 'U', 'S'])

        ap_config = self.sp.add_parser('config', help='Item configuration')
        sp_config = ap_config.add_subparsers(
            dest='_func', metavar='func', help='Configuration commands')

        sp_config_get = sp_config.add_parser('get', help='Get item config')
        sp_config_get.add_argument('i', help='Item ID', metavar='ID')

        sp_config_save = sp_config.add_parser('save', help='Save item config')
        sp_config_save.add_argument('i', help='Item ID', metavar='ID')

        sp_list_props = sp_config.add_parser(
            'props', help='List item config props')
        sp_list_props.add_argument('i', help='Item ID', metavar='ID')

        sp_set_prop = sp_config.add_parser('set', help='Set item config prop')
        sp_set_prop.add_argument('i', help='Item ID', metavar='ID')
        sp_set_prop.add_argument('p', help='Config property', metavar='PROP')
        sp_set_prop.add_argument('v', help='Value', metavar='VAL', nargs='?')
        sp_set_prop.add_argument(
            '-y',
            '--save',
            help='Save item config after set',
            dest='_save',
            action='store_true')

        ap_create = self.sp.add_parser('create', help='Create new item')
        ap_create.add_argument(
            'i', help='Item OID (type:group/id)', metavar='OID')
        ap_create.add_argument(
            '-y',
            '--save',
            help='Save item config after creation',
            dest='_save',
            action='store_true')
        ap_create.add_argument(
            '-z',
            '--virtual',
            help='Create virtual item',
            dest='_virtual',
            action='store_true')

        ap_clone = self.sp.add_parser('clone', help='Clone items')
        sp_clone = ap_clone.add_subparsers(
            dest='_func', metavar='func', help='Cloning commands')

        sp_clone_item = sp_clone.add_parser('item', help='Clone single item')
        sp_clone_item.add_argument('i', help='Item ID', metavar='ID')
        sp_clone_item.add_argument(
            'n', help='New item ID (short)', metavar='ID')
        sp_clone_item.add_argument(
            '-g',
            '--group',
            help='Group for new item',
            metavar='GROUP',
            dest='g')
        sp_clone_item.add_argument(
            '-y',
            '--save',
            help='Save item config after cloning',
            dest='_save',
            action='store_true')

        sp_clone_group = sp_clone.add_parser(
            'group', help='Clone group of the items')
        sp_clone_group.add_argument(
            'g', help='Source group', metavar='SRC_GROUP')
        sp_clone_group.add_argument(
            'n', help='Target group', metavar='TGT_GROUP')
        sp_clone_group.add_argument(
            'p', help='Source items prefix', metavar='SRC_PFX')
        sp_clone_group.add_argument(
            'r', help='Target items prefix', metavar='TGT_PFX')
        sp_clone_group.add_argument(
            '-y',
            '--save',
            help='Save items config after cloning',
            dest='_save',
            action='store_true')

        ap_destroy = self.sp.add_parser('destroy', help='Delete item')
        ap_destroy.add_argument('i', help='Item ID', metavar='ID', nargs='?')
        ap_destroy.add_argument(
            '-g', '--group', help='Destroy group of items', dest='g')

    def add_uc_device_functions(self):
        ap_device = self.sp.add_parser('device', help='Device management')
        sp_device = ap_device.add_subparsers(
            dest='_func', metavar='func', help='Device commands')
        sp_device_create = sp_device.add_parser(
            'create', help='Create device with a template')
        sp_device_create.add_argument(
            't',
            help='Template name (file=runtime/tpl/<TPL>.json)',
            metavar='TPL')
        sp_device_create.add_argument(
            '-c',
            '--config',
            help='Template vars, comma separated',
            metavar='VARS',
            dest='c')
        sp_device_create.add_argument(
            '-y',
            '--save',
            help='Save items config after creation',
            dest='_save',
            action='store_true')

        sp_device_update = sp_device.add_parser(
            'update', help='Update device item props with a template')
        sp_device_update.add_argument(
            't', help='Template file (in runtime/tpl folder)', metavar='TPL')
        sp_device_update.add_argument(
            '-c',
            '--config',
            help='Template vars, comma separated',
            metavar='VARS',
            dest='c')
        sp_device_update.add_argument(
            '-y',
            '--save',
            help='Save items config after creation',
            dest='_save',
            action='store_true')

        sp_device_destroy = sp_device.add_parser(
            'destroy', help='Destroy device with a template')
        sp_device_destroy.add_argument(
            't', help='Template file (in runtime/tpl folder)', metavar='TPL')
        sp_device_destroy.add_argument(
            '-c',
            '--config',
            help='Template vars, comma separated',
            metavar='VARS',
            dest='c')

    def add_uc_driver_functions(self):
        ap_phi = self.sp.add_parser('phi', help='PHI (Physical interface)')
        ap_lpi = self.sp.add_parser(
            'lpi', help='LPI (Logical to physical interface)')
        ap_driver = self.sp.add_parser('driver', help='Drivers ( PHI + LPI )')

        sp_phi = ap_phi.add_subparsers(
            dest='_func', metavar='func', help='PHI commands')
        sp_lpi = ap_lpi.add_subparsers(
            dest='_func', metavar='func', help='LPI commands')
        sp_driver = ap_driver.add_subparsers(
            dest='_func', metavar='func', help='Driver commands')

        sp_phi_list = sp_phi.add_parser('list', help='List loaded PHIs')
        sp_phi_list.add_argument(
            '-y',
            '--full',
            help='Full information about PHI',
            dest='_full',
            action='store_true')
        sp_driver_list = sp_driver.add_parser(
            'list', help='List loaded drivers')
        sp_driver_list.add_argument(
            '-y',
            '--full',
            help='Full information about driver',
            dest='_full',
            action='store_true')

        sp_phi_get = sp_phi.add_parser('get', help='Get loaded PHI info')
        sp_phi_get.add_argument('i', help='PHI ID', metavar='PHI_ID')

        sp_phi_mods = sp_phi.add_parser('mods', help='List available PHI mods')
        sp_lpi_mods = sp_lpi.add_parser('mods', help='List available LPI mods')

        sp_phi_test = sp_phi.add_parser('test', help='Send test call to PHI')
        sp_phi_test.add_argument('i', help='PHI ID', metavar='PHI_ID')
        sp_phi_test.add_argument('c', help='PHI test command', metavar='CMD')

        sp_driver_get = sp_driver.add_parser(
            'get', help='Get loaded driver info')
        sp_driver_get.add_argument('i', help='Driver ID', metavar='DRIVER_ID')

        sp_phi_load = sp_phi.add_parser('load', help='Load PHI')
        sp_phi_load.add_argument('i', help='PHI ID', metavar='PHI_ID')
        sp_phi_load.add_argument('m', help='PHI module', metavar='PHI_MOD')
        sp_phi_load.add_argument(
            '-c',
            '--config',
            help='PHI configuration values, comma separated',
            dest='c',
            metavar='CONFIG')
        sp_phi_load.add_argument(
            '-y',
            '--save',
            help='save configuration on success load',
            dest='_save',
            action='store_true')

        sp_driver_load = sp_driver.add_parser('load', help='Load driver')
        sp_driver_load.add_argument(
            'i', help='Driver ID (PHI_ID.LPI.ID)', metavar='PHI_ID.LPI_ID')
        sp_driver_load.add_argument('m', help='LPI module', metavar='LPI_MOD')
        sp_driver_load.add_argument(
            '-c',
            '--config',
            help='driver configuration values, comma separated',
            dest='c',
            metavar='CONFIG')
        sp_driver_load.add_argument(
            '-y',
            '--save',
            help='save configuration on success load',
            dest='_save',
            action='store_true')

        sp_phi_unload = sp_phi.add_parser('unload', help='Unload PHI')
        sp_phi_unload.add_argument('i', help='PHI ID', metavar='PHI_ID')

        sp_driver_unload = sp_driver.add_parser('unload', help='Unload driver')
        sp_driver_unload.add_argument(
            'i', help='Driver ID', metavar='DRIVER_ID')

        sp_driver_set = sp_driver.add_parser(
            'set', help='Set for the item (action & update)')
        sp_driver_set.add_argument('i', help='Item ID', metavar='ID')
        sp_driver_set.add_argument('d', help='Driver ID', metavar='DRIVER_ID')
        sp_driver_set.add_argument(
            '-c',
            '--config',
            help='item driver config (ports etc.)',
            dest='c',
            metavar='CONFIG')
        sp_driver_set.add_argument(
            '-y',
            '--save',
            help='save configuration',
            dest='_save',
            action='store_true')

        sp_driver_unset = sp_driver.add_parser(
            'unset',
            help=
            'Unset for the item (set action, update and driver_config to null)')
        sp_driver_unset.add_argument('i', help='Item ID', metavar='ID')
        sp_driver_unset.add_argument(
            '-y',
            '--save',
            help='save configuration',
            dest='_save',
            action='store_true')

        sp_phi_modinfo = sp_phi.add_parser('modinfo', help='PHI module info')
        sp_phi_modinfo.add_argument('i', help='PHI module', metavar='PHI_MOD')

        sp_lpi_modinfo = sp_lpi.add_parser('modinfo', help='LPI module info')
        sp_lpi_modinfo.add_argument('i', help='LPI module', metavar='LPI_MOD')

        sp_phi_modhelp = sp_phi.add_parser('modhelp', help='PHI module help')
        sp_phi_modhelp.add_argument('i', help='PHI module', metavar='PHI_MOD')
        sp_phi_modhelp.add_argument(
            'c',
            help='Help context (cfg, get, set)',
            metavar='CONTEXT',
            choices=['cfg', 'get', 'set'])

        sp_lpi_modhelp = sp_lpi.add_parser('modhelp', help='LPI module help')
        sp_lpi_modhelp.add_argument('i', help='LPI module', metavar='LPI_MOD')
        sp_lpi_modhelp.add_argument(
            'c',
            help='Help context (cfg, action, update)',
            metavar='CONTEXT',
            choices=['cfg', 'action', 'update'])


cli = UC_CLI(_me)
cli.product = 'uc'
cli.always_json += _always_json
cli.always_print += ['action', 'action_toggle']
cli.arg_sections += [
    'action', 'config', 'clone', 'device', 'phi', 'lpi', 'driver'
]
cli.set_api_functions(_api_functions)
cli.set_pd_cols(_pd_cols)
cli.set_pd_idx(_pd_idx)
cli.set_fancy_tabsp(_fancy_tabsp)
code = cli.run()
sys.exit(code)
