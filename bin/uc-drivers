#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

__author__ = "Altertech Group, https://www.altertech.com/"
__copyright__ = "Copyright (C) 2012-2018 Altertech Group"
__license__ = "https://www.eva-ics.com/license"
__version__ = "3.1.0"

import os
import sys
import jsonpickle
import argparse
import re

dir_lib = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(dir_lib)

from eva.client import apiclient

import eva.core
from eva.tools import print_json

xparams = {}
timeout = None
apikey = None
apiuri = None

debug = False

default_timeout = 5

_me = 'EVA ICS UC driver manager CLI version %s' % __version__


def _prepare_result_data(data):
    result = []
    for d in data.copy():
        if a._type == 'driver':
            if 'phi' in d:
                d['phi_mod'] = d['phi'].get('mod')
                del d['phi']
        elif a._type == 'phi':
            if 'equipment' in d and isinstance(d['equipment'], list):
                d['equipment'] = ', '.join(d['equipment'])
        elif a._type == 'lpi':
            if 'logic' in d and isinstance(d['logic'], list):
                d['logic'] = ', '.join(d['logic'])
        result.append(d)
    return result


_pd_cols = {
    'list_phi_': ['id', 'mod', 'description', 'version'],
    'list_drivers_':
    ['id', 'mod', 'phi_id', 'phi_mod', 'description', 'version'],
    'list_drivers': ['id', 'mod', 'phi_id'],
    'list_phi_mods': ['mod', 'equipment', 'description', 'version', 'api'],
    'list_lpi_mods': ['mod', 'logic', 'description', 'version', 'api'],
    'modhelp_lpi': [ 'name', 'type', 'required', 'help'],
    'modhelp_phi': [ 'name', 'type', 'required', 'help']
}


def fancy_print_result(result, tab=0):
    if result and isinstance(result, dict):
        rprinted = False
        h = None
        for v in sorted(result.keys()):
            if v == 'help' and not tab:
                h = result[v]
            elif v != 'result':
                if isinstance(result[v], dict):
                    if tab:
                        print(' ' * (tab * 10), end='>' * tab + ' ')
                    print(("{:>%u} : {}" % max(map(len, result))).format(v, ''))
                    fancy_print_result(result[v], tab + 1)
                else:
                    if tab:
                        print(' ' * (tab * 10), end='>' * tab + ' ')
                    if isinstance(result[v], list):
                        _v = ', '.join(result[v])
                    else:
                        _v = result[v]
                    print(("{:>%u} : {}" % max(map(len, result))).format(v, _v))
                rprinted = True
        if h:
            print('-'*81)
            print(h.strip())
            rprinted = True
        if not rprinted and not tab:
            print('OK')
    elif result and isinstance(result, list):
        import pandas as pd
        pd.options.display.max_colwidth = 65
        df = pd.DataFrame(data=_prepare_result_data(result))
        if api_func + api_func_full in _pd_cols:
            cols = _pd_cols[api_func + api_func_full]
        else:
            cols = list(df)
        df = df.ix[:, cols]
        try:
            if api_func not in ['list_phi_mods', 'list_lpi_mods']:
                idxcol = 'id'
            else:
                idxcol = 'mod'
            if idxcol in list(df):
                df.set_index(idxcol, inplace=True)
            else:
                idxcol = list(df)[0]
                df.set_index(list(df)[0], inplace=True)
            out = df.fillna(' ').to_string().split('\n')
            print(idxcol + out[0][len(idxcol):])
            print('-' * len(out[0]))
            [print(re.sub('^NaN', '   ', o)) for o in out[2:]]
        except:
            pass
    elif result:
        print(result)


ap = argparse.ArgumentParser(description=_me)
ap.add_argument(
    '-K',
    '--api-key',
    help='master key, if no key specified, local master key will be used',
    dest='_api_key',
    metavar='KEY')
ap.add_argument(
    '-U',
    '--api-url',
    help='API URL',
    dest='_api_uri',
    metavar='URL')
ap.add_argument(
    '-T',
    '--api-timeout',
    help='API request timeout (in seconds)',
    type=float,
    default=default_timeout,
    dest='_timeout',
    metavar='TIMEOUT')
ap.add_argument(
    '-J',
    '--json',
    help='print result as JSON',
    action='store_true',
    dest='_json',
    default=False)
ap.add_argument(
    '-D',
    '--debug',
    help='enable debug messages',
    action='store_true',
    dest='_debug',
    default=False)

sp = ap.add_subparsers(dest='_type', metavar='type', help='instance type')

ap_phi = sp.add_parser('phi', help='PHI (Physical interface)')
ap_lpi = sp.add_parser('lpi', help='LPI (Logical to physical interface)')
ap_driver = sp.add_parser('driver', help='Drivers ( PHI + LPI )')

sp_phi = ap_phi.add_subparsers(
    dest='_func', metavar='func', help='PHI commands')
sp_lpi = ap_lpi.add_subparsers(
    dest='_func', metavar='func', help='LPI commands')
sp_driver = ap_driver.add_subparsers(
    dest='_func', metavar='func', help='Driver commands')

sp_phi_list = sp_phi.add_parser('list', help='List loaded PHIs')
sp_phi_list.add_argument(
    '-y',
    '--full',
    help='full information about PHI',
    dest='_full',
    action='store_true')
sp_driver_list = sp_driver.add_parser('list', help='List loaded drivers')
sp_driver_list.add_argument(
    '-y',
    '--full',
    help='full information about driver',
    dest='_full',
    action='store_true')

sp_phi_show = sp_phi.add_parser('show', help='Show loaded PHI info')
sp_phi_show.add_argument('_i', help='PHI id', metavar='PHI_ID')

sp_phi_mods = sp_phi.add_parser('mods', help='List available PHI mods')
sp_lpi_mods = sp_lpi.add_parser('mods', help='List available LPI mods')

sp_phi_test = sp_phi.add_parser('test', help='Send test call to PHI')
sp_phi_test.add_argument('_i', help='PHI id', metavar='PHI_ID')
sp_phi_test.add_argument('_c', help='PHI test command', metavar='CMD')

sp_driver_show = sp_driver.add_parser('show', help='Show loaded driver info')
sp_driver_show.add_argument('_i', help='driver id', metavar='DRIVER_ID')

sp_phi_load = sp_phi.add_parser('load', help='Load PHI')
sp_phi_load.add_argument('_i', help='PHI id', metavar='PHI_ID')
sp_phi_load.add_argument('_m', help='PHI module', metavar='PHI_MOD')
sp_phi_load.add_argument(
    '-c',
    '--config',
    help='PHI configuration values, comma separated',
    dest='_c',
    metavar='CONFIG')
sp_phi_load.add_argument(
    '-y',
    '--save',
    help='save configuration on success load',
    dest='_save',
    action='store_true')

sp_driver_load = sp_driver.add_parser('load', help='Load driver')
sp_driver_load.add_argument(
    '_i', help='driver id (PHI_ID.LPI.ID)', metavar='PHI_ID.LPI_ID')
sp_driver_load.add_argument('_m', help='LPI module', metavar='LPI_MOD')
sp_driver_load.add_argument(
    '-c',
    '--config',
    help='driver configuration values, comma separated',
    dest='_c',
    metavar='CONFIG')
sp_driver_load.add_argument(
    '-y',
    '--save',
    help='save configuration on success load',
    dest='_save',
    action='store_true')

sp_phi_unload = sp_phi.add_parser('unload', help='Unload PHI')
sp_phi_unload.add_argument('_i', help='PHI id', metavar='PHI_ID')

sp_driver_unload = sp_driver.add_parser('unload', help='Unload driver')
sp_driver_unload.add_argument('_i', help='driver id', metavar='DRIVER_ID')

sp_driver_set = sp_driver.add_parser(
    'set', help='Set for the item (action & update)')
sp_driver_set.add_argument('_i', help='item id', metavar='ID')
sp_driver_set.add_argument('_d', help='driver id', metavar='DRIVER_ID')
sp_driver_set.add_argument(
    '-c',
    '--config',
    help='item driver config (ports etc.)',
    dest='_c',
    metavar='CONFIG')
sp_driver_set.add_argument(
    '-y',
    '--save',
    help='save configuration',
    dest='_save',
    action='store_true')

sp_phi_modinfo = sp_phi.add_parser('modinfo', help='PHI module info')
sp_phi_modinfo.add_argument('_i', help='PHI module', metavar='PHI_MOD')

sp_lpi_modinfo = sp_lpi.add_parser('modinfo', help='LPI module info')
sp_lpi_modinfo.add_argument('_i', help='LPI module', metavar='LPI_MOD')

sp_phi_modhelp = sp_phi.add_parser('modhelp', help='PHI module help')
sp_phi_modhelp.add_argument('_i', help='PHI module', metavar='PHI_MOD')
sp_phi_modhelp.add_argument(
    '_c',
    help='Help context (cfg, get, set)',
    metavar='CONTEXT',
    choices=['cfg', 'get', 'set'])

sp_lpi_modhelp = sp_lpi.add_parser('modhelp', help='LPI module help')
sp_lpi_modhelp.add_argument('_i', help='LPI module', metavar='LPI_MOD')
sp_lpi_modhelp.add_argument(
    '_c',
    help='Help context (cfg, action, update)',
    metavar='CONTEXT',
    choices=['cfg', 'action', 'update'])

try:
    import argcomplete
    argcomplete.autocomplete(ap)
except:
    pass

a = ap.parse_args()

if not a._type:
    ap.print_usage()
    sys.exit(99)

if a._type and a._func:
    api_func = a._func + '_' + a._type
else:
    api_func = a._type

debug = a._debug

if api_func == 'show_phi': api_func = 'get_phi'
elif api_func == 'show_driver': api_func = 'get_driver'
elif api_func == 'list_driver': api_func = 'list_drivers'
elif api_func == 'mods_phi': api_func = 'list_phi_mods'
elif api_func == 'mods_lpi': api_func = 'list_lpi_mods'

apiuri = a._api_uri
apikey = a._api_key

if not apiuri:
    try:
        api = apiclient.APIClientLocal('uc')
    except:
        print('Can not init API, uc.ini or uc_apikeys.ini missing?')
        sys.exit(98)
else:
    api = apiclient.APIClient()
    api.set_uri(apiuri)
    api.set_product('uc')

if apikey is not None:
    api.set_key(apikey)

api.ssl_verify(False)

params = {}

if hasattr(a, '_full') and a._full:
    params['full'] = 1
    api_func_full = '_'
else:
    api_func_full = ''

if hasattr(a, '_save') and a._save:
    params['save'] = 1

if hasattr(a, '_i') and a._i is not None:
    if api_func == 'load_driver':
        try:
            params['p'], params['i'] = a._i.split('.')
        except:
            print("Invalid driver ID")
            sys.exit(98)
    else:
        params['i'] = a._i

if hasattr(a, '_m') and a._m is not None:
    params['m'] = a._m

if hasattr(a, '_d') and a._d is not None:
    params['d'] = a._d

if hasattr(a, '_c') and a._i is not None:
    params['c'] = a._c

timeout = a._timeout

if debug:
    print('API:', api._uri)
    print('API func:', api_func)
    print('timeout:', timeout)
    print('params', params)
code, result = api.call(api_func, params, timeout, _debug=debug)

if code != apiclient.result_ok and \
        code != apiclient.result_func_failed:
    if code == apiclient.result_not_found:
        print('Error: Object not found')
    elif code == apiclient.result_forbidden:
        print('Error: Forbidden')
    elif code == apiclient.result_api_error:
        print('Error: API error')
    elif code == apiclient.result_unknown_error:
        print('Error: Unknown error')
    elif code == apiclient.result_not_ready:
        print('Error: API not ready')
    elif code == apiclient.result_func_unknown:
        ap.print_usage()
    elif code == apiclient.result_server_error:
        print('Error: Server error')
    elif code == apiclient.result_server_timeout:
        print('Error: Server timeout')
    elif code == apiclient.result_bad_data:
        print('Error: Bad data')
    elif code == apiclient.result_invalid_params:
        print('Error: invalid params')
    if debug:
        print('API result code: %u' % code)
    sys.exit(code)
else:
    if a._json:
        print_json(result)
        if 'result' in result and result['result'] == 'ERROR':
            sys.exit(apiclient.result_func_failed)
    else:
        if code == apiclient.result_func_failed:
            print('FAILED')
        elif 'result' in result:
            print(result['result'])
            if result['result'] == 'ERROR':
                sys.exit(apiclient.result_func_failed)
        else:
            if result:
                fancy_print_result(result)
sys.exit(code)
