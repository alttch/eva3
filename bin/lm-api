#!/usr/bin/env python3

__author__ = "Altertech Group, https://www.altertech.com/"
__copyright__ = "Copyright (C) 2012-2018 Altertech Group"
__license__ = "Apache License 2.0"
__version__ = "3.1.1"

import os
import sys
import getopt
import jsonpickle

dir_lib = os.path.dirname(os.path.realpath(__file__)) + '/../lib'
sys.path.append(dir_lib)

from eva.client import apiclient

from eva.tools import print_json


def usage():
    print()
    print('EVA LM API CLI version %s' % (apiclient.version))
    print("""
Usage: lm-api <command> [args] [-U API uri] [-K key] [-T sec] [-D]

    -U   specify API uri (http://host:port), if no uri specified, API will be
         called in local mode (with data from ../etc/lm.ini and lm_apikeys.ini)
    -K   key, if no key specified, local master key will be used (if local API)
    -T   API request timeout
    -D   Enable debug messages

each command calls the corresponding API function and returns API JSON result

Exit codes:

the exit codes are equal to the return codes of API client:

    0   everything is okay
    1   item (i.e. unit) not found or command was executed with wrong params
    2   forbidden (access to the object or function is denied)
    3   API returned error 500 (wrong params - used string instead of number
        etc.)
    4   API returned unknown error, try enabling debug mode and repeat,
        maybe it's a bug
    5   API not ready. returns when unable to open etc/lm.ini or lm_apikeys.ini
        and API uri was not specified
    6   unknown command/function or no function specified
    7   server error (unable to connect etc.)
    8   server timeout
    9   server returned bad data (not JSON)
    10  command/function failed (i.e. executed action/cmd was completed with
        an error)
    11  invalid command params

    99  if no command specified
    """)


xparams = {}
timeout = None
apikey = None
apiuri = None

debug = False

try:
    func = sys.argv[1]
    o, a = getopt.getopt(sys.argv[2:],
                         'K:T:U:m:a:c:l:t:e:n:i:u:g:p:q:s:v:w:x:yzD')
except:
    usage()
    sys.exit(99)

for i, v in o:
    if i == '-y':
        xparams['full'] = '1'
    elif i == '-z':
        xparams['virtual'] = '1'
    elif i == '-T':
        try:
            timeout = float(v)
        except:
            usage()
            sys.exit(99)
    elif i == '-U':
        apiuri = v
        if apiuri[-1] == '/': apiuri = apiuri[:-1]
    elif i == '-K':
        apikey = v
    elif i == '-D':
        debug = True
    else:
        xparams[i[1:]] = v

if not apiuri:
    try:
        api = apiclient.APIClientLocal('lm')
    except:
        print('Can not init API, lm.ini or lm_apikeys.ini missing?')
        sys.exit(98)
else:
    api = apiclient.APIClient()
    api.set_uri(apiuri)
    api.set_product('lm')

if apikey is not None:
    api.set_key(apikey)

api.ssl_verify(False)

params = {}

if ( func == 'set_prop' or \
        func == 'set_controller_prop' or \
        func == 'set_macro_prop' or \
        func == 'set_rule_prop' or \
        func == 'load_ext' or \
        func == 'create_rule' or \
        func == 'create_macro' or \
        func == 'append_controller' or \
        func == 'create_lvar' ) \
        and 'full' in xparams and xparams['full'] == '1':
    del xparams['full']
    params['save'] = '1'

if func == 'debug':
    params['debug'] = 1
    func = 'set_debug'
elif func == 'nodebug':
    params['debug'] = 0
    func = 'set_debug'
elif func == 'setup':
    params['setup'] = 1
    func = 'setup_mode'
elif func == 'nosetup':
    params['setup'] = 0
    func = 'setup_mode'
else:
    params.update(xparams)

if func == 'file_put':
    if not 'm' in params:
        if not 'l' in params:
            usage()
            sys.exit(99)
        try:
            params['m'] = ''.join(open(params['l']).readlines())
            del params['l']
        except:
            print('Can\'t read local file %s' % params['l'])
            sys.exit(apiclient.result_not_found)

if debug:
    print('API:', api._uri)
    print('API func:', func)
    print('Params', params)
code, result = api.call(func, params, timeout, _debug=debug)

if code != apiclient.result_ok and \
        code != apiclient.result_func_failed:
    if code == apiclient.result_not_found:
        print('Error: Object not found')
    elif code == apiclient.result_forbidden:
        print('Error: Forbidden')
    elif code == apiclient.result_api_error:
        print('Error: API error')
    elif code == apiclient.result_unknown_error:
        print('Error: Unknown error')
    elif code == apiclient.result_not_ready:
        print('Error: API not ready')
    elif code == apiclient.result_func_unknown:
        usage()
    elif code == apiclient.result_server_error:
        print('Error: Server error')
    elif code == apiclient.result_server_timeout:
        print('Error: Server timeout')
    elif code == apiclient.result_bad_data:
        print('Error: Bad data')
    elif code == apiclient.result_invalid_params:
        print('Error: invalid params')
    sys.exit(code)
else:
    if func in ['run'] and \
        'status' in result and \
        result['status'] == 'completed':
        t1 = result['time']['created']
        t2 = result['time']['completed']
        xtime = t2 - t1
        print('Exec time: %f sec  ( %f ms )' % (xtime, xtime * 1000))
    print_json(result)

sys.exit(code)
